-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity feedforward_feedforward_Pipeline_VITIS_LOOP_122_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer2_activations_6_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    layer2_activations_6_ce0 : OUT STD_LOGIC;
    layer2_activations_6_we0 : OUT STD_LOGIC;
    layer2_activations_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer2_activations_6_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    layer2_activations_6_ce1 : OUT STD_LOGIC;
    layer2_activations_6_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer2_activations_5_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    layer2_activations_5_ce0 : OUT STD_LOGIC;
    layer2_activations_5_we0 : OUT STD_LOGIC;
    layer2_activations_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer2_activations_5_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    layer2_activations_5_ce1 : OUT STD_LOGIC;
    layer2_activations_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer2_activations_4_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    layer2_activations_4_ce0 : OUT STD_LOGIC;
    layer2_activations_4_we0 : OUT STD_LOGIC;
    layer2_activations_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer2_activations_4_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    layer2_activations_4_ce1 : OUT STD_LOGIC;
    layer2_activations_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer2_activations_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    layer2_activations_ce0 : OUT STD_LOGIC;
    layer2_activations_we0 : OUT STD_LOGIC;
    layer2_activations_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer2_activations_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    layer2_activations_ce1 : OUT STD_LOGIC;
    layer2_activations_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of feedforward_feedforward_Pipeline_VITIS_LOOP_122_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv8_4 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_FFFCF000 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111001111000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal tmp_fu_124_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal layer2_activations_addr_reg_220 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer2_activations_addr_reg_220_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal layer2_activations_4_addr_reg_226 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer2_activations_4_addr_reg_226_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal layer2_activations_5_addr_reg_232 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer2_activations_5_addr_reg_232_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal layer2_activations_6_addr_reg_238 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer2_activations_6_addr_reg_238_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal layer2_activations_load_reg_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer2_activations_4_load_reg_249 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer2_activations_5_load_reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer2_activations_6_load_reg_259 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln122_fu_142_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_3_fu_44 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln122_fu_150_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (7 downto 0);
    signal layer2_activations_ce1_local : STD_LOGIC;
    signal layer2_activations_we0_local : STD_LOGIC;
    signal add_ln125_fu_166_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer2_activations_ce0_local : STD_LOGIC;
    signal layer2_activations_4_ce1_local : STD_LOGIC;
    signal layer2_activations_4_we0_local : STD_LOGIC;
    signal add_ln125_1_fu_178_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer2_activations_4_ce0_local : STD_LOGIC;
    signal layer2_activations_5_ce1_local : STD_LOGIC;
    signal layer2_activations_5_we0_local : STD_LOGIC;
    signal add_ln125_2_fu_190_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer2_activations_5_ce0_local : STD_LOGIC;
    signal layer2_activations_6_ce1_local : STD_LOGIC;
    signal layer2_activations_6_we0_local : STD_LOGIC;
    signal add_ln125_3_fu_202_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer2_activations_6_ce0_local : STD_LOGIC;
    signal lshr_ln3_fu_132_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln125_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln125_1_fu_173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln125_2_fu_185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln125_3_fu_197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component feedforward_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component feedforward_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    i_3_fu_44_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((tmp_fu_124_p3 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_3_fu_44 <= add_ln122_fu_150_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_3_fu_44 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                layer2_activations_4_addr_reg_226 <= zext_ln122_fu_142_p1(5 - 1 downto 0);
                layer2_activations_4_addr_reg_226_pp0_iter1_reg <= layer2_activations_4_addr_reg_226;
                layer2_activations_5_addr_reg_232 <= zext_ln122_fu_142_p1(5 - 1 downto 0);
                layer2_activations_5_addr_reg_232_pp0_iter1_reg <= layer2_activations_5_addr_reg_232;
                layer2_activations_6_addr_reg_238 <= zext_ln122_fu_142_p1(5 - 1 downto 0);
                layer2_activations_6_addr_reg_238_pp0_iter1_reg <= layer2_activations_6_addr_reg_238;
                layer2_activations_addr_reg_220 <= zext_ln122_fu_142_p1(5 - 1 downto 0);
                layer2_activations_addr_reg_220_pp0_iter1_reg <= layer2_activations_addr_reg_220;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                layer2_activations_4_load_reg_249 <= layer2_activations_4_q1;
                layer2_activations_5_load_reg_254 <= layer2_activations_5_q1;
                layer2_activations_6_load_reg_259 <= layer2_activations_6_q1;
                layer2_activations_load_reg_244 <= layer2_activations_q1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln122_fu_150_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv8_4));
    add_ln125_1_fu_178_p2 <= std_logic_vector(unsigned(shl_ln125_1_fu_173_p2) + unsigned(ap_const_lv32_FFFCF000));
    add_ln125_2_fu_190_p2 <= std_logic_vector(unsigned(shl_ln125_2_fu_185_p2) + unsigned(ap_const_lv32_FFFCF000));
    add_ln125_3_fu_202_p2 <= std_logic_vector(unsigned(shl_ln125_3_fu_197_p2) + unsigned(ap_const_lv32_FFFCF000));
    add_ln125_fu_166_p2 <= std_logic_vector(unsigned(shl_ln125_fu_161_p2) + unsigned(ap_const_lv32_FFFCF000));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, tmp_fu_124_p3)
    begin
        if (((tmp_fu_124_p3 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_3_fu_44, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_i <= i_3_fu_44;
        end if; 
    end process;

    layer2_activations_4_address0 <= layer2_activations_4_addr_reg_226_pp0_iter1_reg;
    layer2_activations_4_address1 <= zext_ln122_fu_142_p1(5 - 1 downto 0);
    layer2_activations_4_ce0 <= layer2_activations_4_ce0_local;

    layer2_activations_4_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer2_activations_4_ce0_local <= ap_const_logic_1;
        else 
            layer2_activations_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    layer2_activations_4_ce1 <= layer2_activations_4_ce1_local;

    layer2_activations_4_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_activations_4_ce1_local <= ap_const_logic_1;
        else 
            layer2_activations_4_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    layer2_activations_4_d0 <= add_ln125_1_fu_178_p2;
    layer2_activations_4_we0 <= layer2_activations_4_we0_local;

    layer2_activations_4_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer2_activations_4_we0_local <= ap_const_logic_1;
        else 
            layer2_activations_4_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    layer2_activations_5_address0 <= layer2_activations_5_addr_reg_232_pp0_iter1_reg;
    layer2_activations_5_address1 <= zext_ln122_fu_142_p1(5 - 1 downto 0);
    layer2_activations_5_ce0 <= layer2_activations_5_ce0_local;

    layer2_activations_5_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer2_activations_5_ce0_local <= ap_const_logic_1;
        else 
            layer2_activations_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    layer2_activations_5_ce1 <= layer2_activations_5_ce1_local;

    layer2_activations_5_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_activations_5_ce1_local <= ap_const_logic_1;
        else 
            layer2_activations_5_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    layer2_activations_5_d0 <= add_ln125_2_fu_190_p2;
    layer2_activations_5_we0 <= layer2_activations_5_we0_local;

    layer2_activations_5_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer2_activations_5_we0_local <= ap_const_logic_1;
        else 
            layer2_activations_5_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    layer2_activations_6_address0 <= layer2_activations_6_addr_reg_238_pp0_iter1_reg;
    layer2_activations_6_address1 <= zext_ln122_fu_142_p1(5 - 1 downto 0);
    layer2_activations_6_ce0 <= layer2_activations_6_ce0_local;

    layer2_activations_6_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer2_activations_6_ce0_local <= ap_const_logic_1;
        else 
            layer2_activations_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    layer2_activations_6_ce1 <= layer2_activations_6_ce1_local;

    layer2_activations_6_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_activations_6_ce1_local <= ap_const_logic_1;
        else 
            layer2_activations_6_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    layer2_activations_6_d0 <= add_ln125_3_fu_202_p2;
    layer2_activations_6_we0 <= layer2_activations_6_we0_local;

    layer2_activations_6_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer2_activations_6_we0_local <= ap_const_logic_1;
        else 
            layer2_activations_6_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    layer2_activations_address0 <= layer2_activations_addr_reg_220_pp0_iter1_reg;
    layer2_activations_address1 <= zext_ln122_fu_142_p1(5 - 1 downto 0);
    layer2_activations_ce0 <= layer2_activations_ce0_local;

    layer2_activations_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer2_activations_ce0_local <= ap_const_logic_1;
        else 
            layer2_activations_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    layer2_activations_ce1 <= layer2_activations_ce1_local;

    layer2_activations_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_activations_ce1_local <= ap_const_logic_1;
        else 
            layer2_activations_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    layer2_activations_d0 <= add_ln125_fu_166_p2;
    layer2_activations_we0 <= layer2_activations_we0_local;

    layer2_activations_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer2_activations_we0_local <= ap_const_logic_1;
        else 
            layer2_activations_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln3_fu_132_p4 <= ap_sig_allocacmp_i(6 downto 2);
    shl_ln125_1_fu_173_p2 <= std_logic_vector(shift_left(unsigned(layer2_activations_4_load_reg_249),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln125_2_fu_185_p2 <= std_logic_vector(shift_left(unsigned(layer2_activations_5_load_reg_254),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln125_3_fu_197_p2 <= std_logic_vector(shift_left(unsigned(layer2_activations_6_load_reg_259),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln125_fu_161_p2 <= std_logic_vector(shift_left(unsigned(layer2_activations_load_reg_244),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    tmp_fu_124_p3 <= ap_sig_allocacmp_i(7 downto 7);
    zext_ln122_fu_142_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln3_fu_132_p4),64));
end behav;
