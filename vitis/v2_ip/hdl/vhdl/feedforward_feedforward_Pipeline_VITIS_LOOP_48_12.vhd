-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity feedforward_feedforward_Pipeline_VITIS_LOOP_48_12 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_2_reload : IN STD_LOGIC_VECTOR (31 downto 0);
    layer3_activations_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer3_activations_ce0 : OUT STD_LOGIC;
    layer3_activations_we0 : OUT STD_LOGIC;
    layer3_activations_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of feedforward_feedforward_Pipeline_VITIS_LOOP_48_12 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv8_CF : STD_LOGIC_VECTOR (7 downto 0) := "11001111";
    constant ap_const_lv8_D6 : STD_LOGIC_VECTOR (7 downto 0) := "11010110";
    constant ap_const_lv8_D2 : STD_LOGIC_VECTOR (7 downto 0) := "11010010";
    constant ap_const_lv8_16 : STD_LOGIC_VECTOR (7 downto 0) := "00010110";
    constant ap_const_lv8_F1 : STD_LOGIC_VECTOR (7 downto 0) := "11110001";
    constant ap_const_lv8_3B : STD_LOGIC_VECTOR (7 downto 0) := "00111011";
    constant ap_const_lv8_47 : STD_LOGIC_VECTOR (7 downto 0) := "01000111";
    constant ap_const_lv8_19 : STD_LOGIC_VECTOR (7 downto 0) := "00011001";
    constant ap_const_lv8_15 : STD_LOGIC_VECTOR (7 downto 0) := "00010101";
    constant ap_const_lv8_C4 : STD_LOGIC_VECTOR (7 downto 0) := "11000100";
    constant ap_const_lv8_ED : STD_LOGIC_VECTOR (7 downto 0) := "11101101";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_27 : STD_LOGIC_VECTOR (7 downto 0) := "00100111";
    constant ap_const_lv8_D3 : STD_LOGIC_VECTOR (7 downto 0) := "11010011";
    constant ap_const_lv8_21 : STD_LOGIC_VECTOR (7 downto 0) := "00100001";
    constant ap_const_lv8_EC : STD_LOGIC_VECTOR (7 downto 0) := "11101100";
    constant ap_const_lv8_E8 : STD_LOGIC_VECTOR (7 downto 0) := "11101000";
    constant ap_const_lv8_E6 : STD_LOGIC_VECTOR (7 downto 0) := "11100110";
    constant ap_const_lv8_2C : STD_LOGIC_VECTOR (7 downto 0) := "00101100";
    constant ap_const_lv8_29 : STD_LOGIC_VECTOR (7 downto 0) := "00101001";
    constant ap_const_lv8_DB : STD_LOGIC_VECTOR (7 downto 0) := "11011011";
    constant ap_const_lv8_3F : STD_LOGIC_VECTOR (7 downto 0) := "00111111";
    constant ap_const_lv8_EB : STD_LOGIC_VECTOR (7 downto 0) := "11101011";
    constant ap_const_lv8_CC : STD_LOGIC_VECTOR (7 downto 0) := "11001100";
    constant ap_const_lv8_B2 : STD_LOGIC_VECTOR (7 downto 0) := "10110010";
    constant ap_const_lv8_F : STD_LOGIC_VECTOR (7 downto 0) := "00001111";
    constant ap_const_lv8_BD : STD_LOGIC_VECTOR (7 downto 0) := "10111101";
    constant ap_const_lv8_34 : STD_LOGIC_VECTOR (7 downto 0) := "00110100";
    constant ap_const_lv8_CE : STD_LOGIC_VECTOR (7 downto 0) := "11001110";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_43 : STD_LOGIC_VECTOR (7 downto 0) := "01000011";
    constant ap_const_lv8_CB : STD_LOGIC_VECTOR (7 downto 0) := "11001011";
    constant ap_const_lv8_F6 : STD_LOGIC_VECTOR (7 downto 0) := "11110110";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv8_25 : STD_LOGIC_VECTOR (7 downto 0) := "00100101";
    constant ap_const_lv8_13 : STD_LOGIC_VECTOR (7 downto 0) := "00010011";
    constant ap_const_lv8_30 : STD_LOGIC_VECTOR (7 downto 0) := "00110000";
    constant ap_const_lv8_FB : STD_LOGIC_VECTOR (7 downto 0) := "11111011";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv8_FC : STD_LOGIC_VECTOR (7 downto 0) := "11111100";
    constant ap_const_lv8_36 : STD_LOGIC_VECTOR (7 downto 0) := "00110110";
    constant ap_const_lv8_EA : STD_LOGIC_VECTOR (7 downto 0) := "11101010";
    constant ap_const_lv8_1E : STD_LOGIC_VECTOR (7 downto 0) := "00011110";
    constant ap_const_lv8_D8 : STD_LOGIC_VECTOR (7 downto 0) := "11011000";
    constant ap_const_lv8_D7 : STD_LOGIC_VECTOR (7 downto 0) := "11010111";
    constant ap_const_lv8_F3 : STD_LOGIC_VECTOR (7 downto 0) := "11110011";
    constant ap_const_lv8_DF : STD_LOGIC_VECTOR (7 downto 0) := "11011111";
    constant ap_const_lv8_11 : STD_LOGIC_VECTOR (7 downto 0) := "00010001";
    constant ap_const_lv8_1C : STD_LOGIC_VECTOR (7 downto 0) := "00011100";
    constant ap_const_lv8_33 : STD_LOGIC_VECTOR (7 downto 0) := "00110011";
    constant ap_const_lv8_38 : STD_LOGIC_VECTOR (7 downto 0) := "00111000";
    constant ap_const_lv8_12 : STD_LOGIC_VECTOR (7 downto 0) := "00010010";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln48_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal x_1_reg_621 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln20_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_629 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln48_fu_598_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal x_fu_272 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln48_fu_309_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_x_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer3_activations_we0_local : STD_LOGIC;
    signal zext_ln51_fu_609_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer3_activations_ce0_local : STD_LOGIC;
    signal b_fu_319_p129 : STD_LOGIC_VECTOR (7 downto 0);
    signal b_fu_319_p130 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p131 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln18_fu_583_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal cnt_fu_602_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal b_fu_319_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p5 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p7 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p9 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p11 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p13 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p15 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p17 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p19 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p21 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p23 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p25 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p27 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p29 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p31 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p33 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p35 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p37 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p39 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p41 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p43 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p45 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p47 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p49 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p51 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p53 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p55 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p57 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p59 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p61 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p63 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p65 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p67 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p69 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p71 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p73 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p75 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p77 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p79 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p81 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p83 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p85 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p87 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p89 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p91 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p93 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p95 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p97 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p99 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p101 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p103 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p105 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p107 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p109 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p111 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p113 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p115 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p117 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p119 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p121 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p123 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p125 : STD_LOGIC_VECTOR (5 downto 0);
    signal b_fu_319_p127 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component feedforward_sparsemux_129_6_8_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (5 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (5 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (5 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (5 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (5 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (5 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (5 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (5 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (5 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (5 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (5 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (5 downto 0);
        din11_WIDTH : INTEGER;
        CASE12 : STD_LOGIC_VECTOR (5 downto 0);
        din12_WIDTH : INTEGER;
        CASE13 : STD_LOGIC_VECTOR (5 downto 0);
        din13_WIDTH : INTEGER;
        CASE14 : STD_LOGIC_VECTOR (5 downto 0);
        din14_WIDTH : INTEGER;
        CASE15 : STD_LOGIC_VECTOR (5 downto 0);
        din15_WIDTH : INTEGER;
        CASE16 : STD_LOGIC_VECTOR (5 downto 0);
        din16_WIDTH : INTEGER;
        CASE17 : STD_LOGIC_VECTOR (5 downto 0);
        din17_WIDTH : INTEGER;
        CASE18 : STD_LOGIC_VECTOR (5 downto 0);
        din18_WIDTH : INTEGER;
        CASE19 : STD_LOGIC_VECTOR (5 downto 0);
        din19_WIDTH : INTEGER;
        CASE20 : STD_LOGIC_VECTOR (5 downto 0);
        din20_WIDTH : INTEGER;
        CASE21 : STD_LOGIC_VECTOR (5 downto 0);
        din21_WIDTH : INTEGER;
        CASE22 : STD_LOGIC_VECTOR (5 downto 0);
        din22_WIDTH : INTEGER;
        CASE23 : STD_LOGIC_VECTOR (5 downto 0);
        din23_WIDTH : INTEGER;
        CASE24 : STD_LOGIC_VECTOR (5 downto 0);
        din24_WIDTH : INTEGER;
        CASE25 : STD_LOGIC_VECTOR (5 downto 0);
        din25_WIDTH : INTEGER;
        CASE26 : STD_LOGIC_VECTOR (5 downto 0);
        din26_WIDTH : INTEGER;
        CASE27 : STD_LOGIC_VECTOR (5 downto 0);
        din27_WIDTH : INTEGER;
        CASE28 : STD_LOGIC_VECTOR (5 downto 0);
        din28_WIDTH : INTEGER;
        CASE29 : STD_LOGIC_VECTOR (5 downto 0);
        din29_WIDTH : INTEGER;
        CASE30 : STD_LOGIC_VECTOR (5 downto 0);
        din30_WIDTH : INTEGER;
        CASE31 : STD_LOGIC_VECTOR (5 downto 0);
        din31_WIDTH : INTEGER;
        CASE32 : STD_LOGIC_VECTOR (5 downto 0);
        din32_WIDTH : INTEGER;
        CASE33 : STD_LOGIC_VECTOR (5 downto 0);
        din33_WIDTH : INTEGER;
        CASE34 : STD_LOGIC_VECTOR (5 downto 0);
        din34_WIDTH : INTEGER;
        CASE35 : STD_LOGIC_VECTOR (5 downto 0);
        din35_WIDTH : INTEGER;
        CASE36 : STD_LOGIC_VECTOR (5 downto 0);
        din36_WIDTH : INTEGER;
        CASE37 : STD_LOGIC_VECTOR (5 downto 0);
        din37_WIDTH : INTEGER;
        CASE38 : STD_LOGIC_VECTOR (5 downto 0);
        din38_WIDTH : INTEGER;
        CASE39 : STD_LOGIC_VECTOR (5 downto 0);
        din39_WIDTH : INTEGER;
        CASE40 : STD_LOGIC_VECTOR (5 downto 0);
        din40_WIDTH : INTEGER;
        CASE41 : STD_LOGIC_VECTOR (5 downto 0);
        din41_WIDTH : INTEGER;
        CASE42 : STD_LOGIC_VECTOR (5 downto 0);
        din42_WIDTH : INTEGER;
        CASE43 : STD_LOGIC_VECTOR (5 downto 0);
        din43_WIDTH : INTEGER;
        CASE44 : STD_LOGIC_VECTOR (5 downto 0);
        din44_WIDTH : INTEGER;
        CASE45 : STD_LOGIC_VECTOR (5 downto 0);
        din45_WIDTH : INTEGER;
        CASE46 : STD_LOGIC_VECTOR (5 downto 0);
        din46_WIDTH : INTEGER;
        CASE47 : STD_LOGIC_VECTOR (5 downto 0);
        din47_WIDTH : INTEGER;
        CASE48 : STD_LOGIC_VECTOR (5 downto 0);
        din48_WIDTH : INTEGER;
        CASE49 : STD_LOGIC_VECTOR (5 downto 0);
        din49_WIDTH : INTEGER;
        CASE50 : STD_LOGIC_VECTOR (5 downto 0);
        din50_WIDTH : INTEGER;
        CASE51 : STD_LOGIC_VECTOR (5 downto 0);
        din51_WIDTH : INTEGER;
        CASE52 : STD_LOGIC_VECTOR (5 downto 0);
        din52_WIDTH : INTEGER;
        CASE53 : STD_LOGIC_VECTOR (5 downto 0);
        din53_WIDTH : INTEGER;
        CASE54 : STD_LOGIC_VECTOR (5 downto 0);
        din54_WIDTH : INTEGER;
        CASE55 : STD_LOGIC_VECTOR (5 downto 0);
        din55_WIDTH : INTEGER;
        CASE56 : STD_LOGIC_VECTOR (5 downto 0);
        din56_WIDTH : INTEGER;
        CASE57 : STD_LOGIC_VECTOR (5 downto 0);
        din57_WIDTH : INTEGER;
        CASE58 : STD_LOGIC_VECTOR (5 downto 0);
        din58_WIDTH : INTEGER;
        CASE59 : STD_LOGIC_VECTOR (5 downto 0);
        din59_WIDTH : INTEGER;
        CASE60 : STD_LOGIC_VECTOR (5 downto 0);
        din60_WIDTH : INTEGER;
        CASE61 : STD_LOGIC_VECTOR (5 downto 0);
        din61_WIDTH : INTEGER;
        CASE62 : STD_LOGIC_VECTOR (5 downto 0);
        din62_WIDTH : INTEGER;
        CASE63 : STD_LOGIC_VECTOR (5 downto 0);
        din63_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        din4 : IN STD_LOGIC_VECTOR (7 downto 0);
        din5 : IN STD_LOGIC_VECTOR (7 downto 0);
        din6 : IN STD_LOGIC_VECTOR (7 downto 0);
        din7 : IN STD_LOGIC_VECTOR (7 downto 0);
        din8 : IN STD_LOGIC_VECTOR (7 downto 0);
        din9 : IN STD_LOGIC_VECTOR (7 downto 0);
        din10 : IN STD_LOGIC_VECTOR (7 downto 0);
        din11 : IN STD_LOGIC_VECTOR (7 downto 0);
        din12 : IN STD_LOGIC_VECTOR (7 downto 0);
        din13 : IN STD_LOGIC_VECTOR (7 downto 0);
        din14 : IN STD_LOGIC_VECTOR (7 downto 0);
        din15 : IN STD_LOGIC_VECTOR (7 downto 0);
        din16 : IN STD_LOGIC_VECTOR (7 downto 0);
        din17 : IN STD_LOGIC_VECTOR (7 downto 0);
        din18 : IN STD_LOGIC_VECTOR (7 downto 0);
        din19 : IN STD_LOGIC_VECTOR (7 downto 0);
        din20 : IN STD_LOGIC_VECTOR (7 downto 0);
        din21 : IN STD_LOGIC_VECTOR (7 downto 0);
        din22 : IN STD_LOGIC_VECTOR (7 downto 0);
        din23 : IN STD_LOGIC_VECTOR (7 downto 0);
        din24 : IN STD_LOGIC_VECTOR (7 downto 0);
        din25 : IN STD_LOGIC_VECTOR (7 downto 0);
        din26 : IN STD_LOGIC_VECTOR (7 downto 0);
        din27 : IN STD_LOGIC_VECTOR (7 downto 0);
        din28 : IN STD_LOGIC_VECTOR (7 downto 0);
        din29 : IN STD_LOGIC_VECTOR (7 downto 0);
        din30 : IN STD_LOGIC_VECTOR (7 downto 0);
        din31 : IN STD_LOGIC_VECTOR (7 downto 0);
        din32 : IN STD_LOGIC_VECTOR (7 downto 0);
        din33 : IN STD_LOGIC_VECTOR (7 downto 0);
        din34 : IN STD_LOGIC_VECTOR (7 downto 0);
        din35 : IN STD_LOGIC_VECTOR (7 downto 0);
        din36 : IN STD_LOGIC_VECTOR (7 downto 0);
        din37 : IN STD_LOGIC_VECTOR (7 downto 0);
        din38 : IN STD_LOGIC_VECTOR (7 downto 0);
        din39 : IN STD_LOGIC_VECTOR (7 downto 0);
        din40 : IN STD_LOGIC_VECTOR (7 downto 0);
        din41 : IN STD_LOGIC_VECTOR (7 downto 0);
        din42 : IN STD_LOGIC_VECTOR (7 downto 0);
        din43 : IN STD_LOGIC_VECTOR (7 downto 0);
        din44 : IN STD_LOGIC_VECTOR (7 downto 0);
        din45 : IN STD_LOGIC_VECTOR (7 downto 0);
        din46 : IN STD_LOGIC_VECTOR (7 downto 0);
        din47 : IN STD_LOGIC_VECTOR (7 downto 0);
        din48 : IN STD_LOGIC_VECTOR (7 downto 0);
        din49 : IN STD_LOGIC_VECTOR (7 downto 0);
        din50 : IN STD_LOGIC_VECTOR (7 downto 0);
        din51 : IN STD_LOGIC_VECTOR (7 downto 0);
        din52 : IN STD_LOGIC_VECTOR (7 downto 0);
        din53 : IN STD_LOGIC_VECTOR (7 downto 0);
        din54 : IN STD_LOGIC_VECTOR (7 downto 0);
        din55 : IN STD_LOGIC_VECTOR (7 downto 0);
        din56 : IN STD_LOGIC_VECTOR (7 downto 0);
        din57 : IN STD_LOGIC_VECTOR (7 downto 0);
        din58 : IN STD_LOGIC_VECTOR (7 downto 0);
        din59 : IN STD_LOGIC_VECTOR (7 downto 0);
        din60 : IN STD_LOGIC_VECTOR (7 downto 0);
        din61 : IN STD_LOGIC_VECTOR (7 downto 0);
        din62 : IN STD_LOGIC_VECTOR (7 downto 0);
        din63 : IN STD_LOGIC_VECTOR (7 downto 0);
        def : IN STD_LOGIC_VECTOR (7 downto 0);
        sel : IN STD_LOGIC_VECTOR (5 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component feedforward_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_129_6_8_1_1_U37 : component feedforward_sparsemux_129_6_8_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000000",
        din0_WIDTH => 8,
        CASE1 => "000001",
        din1_WIDTH => 8,
        CASE2 => "000010",
        din2_WIDTH => 8,
        CASE3 => "000011",
        din3_WIDTH => 8,
        CASE4 => "000100",
        din4_WIDTH => 8,
        CASE5 => "000101",
        din5_WIDTH => 8,
        CASE6 => "000110",
        din6_WIDTH => 8,
        CASE7 => "000111",
        din7_WIDTH => 8,
        CASE8 => "001000",
        din8_WIDTH => 8,
        CASE9 => "001001",
        din9_WIDTH => 8,
        CASE10 => "001010",
        din10_WIDTH => 8,
        CASE11 => "001011",
        din11_WIDTH => 8,
        CASE12 => "001100",
        din12_WIDTH => 8,
        CASE13 => "001101",
        din13_WIDTH => 8,
        CASE14 => "001110",
        din14_WIDTH => 8,
        CASE15 => "001111",
        din15_WIDTH => 8,
        CASE16 => "010000",
        din16_WIDTH => 8,
        CASE17 => "010001",
        din17_WIDTH => 8,
        CASE18 => "010010",
        din18_WIDTH => 8,
        CASE19 => "010011",
        din19_WIDTH => 8,
        CASE20 => "010100",
        din20_WIDTH => 8,
        CASE21 => "010101",
        din21_WIDTH => 8,
        CASE22 => "010110",
        din22_WIDTH => 8,
        CASE23 => "010111",
        din23_WIDTH => 8,
        CASE24 => "011000",
        din24_WIDTH => 8,
        CASE25 => "011001",
        din25_WIDTH => 8,
        CASE26 => "011010",
        din26_WIDTH => 8,
        CASE27 => "011011",
        din27_WIDTH => 8,
        CASE28 => "011100",
        din28_WIDTH => 8,
        CASE29 => "011101",
        din29_WIDTH => 8,
        CASE30 => "011110",
        din30_WIDTH => 8,
        CASE31 => "011111",
        din31_WIDTH => 8,
        CASE32 => "100000",
        din32_WIDTH => 8,
        CASE33 => "100001",
        din33_WIDTH => 8,
        CASE34 => "100010",
        din34_WIDTH => 8,
        CASE35 => "100011",
        din35_WIDTH => 8,
        CASE36 => "100100",
        din36_WIDTH => 8,
        CASE37 => "100101",
        din37_WIDTH => 8,
        CASE38 => "100110",
        din38_WIDTH => 8,
        CASE39 => "100111",
        din39_WIDTH => 8,
        CASE40 => "101000",
        din40_WIDTH => 8,
        CASE41 => "101001",
        din41_WIDTH => 8,
        CASE42 => "101010",
        din42_WIDTH => 8,
        CASE43 => "101011",
        din43_WIDTH => 8,
        CASE44 => "101100",
        din44_WIDTH => 8,
        CASE45 => "101101",
        din45_WIDTH => 8,
        CASE46 => "101110",
        din46_WIDTH => 8,
        CASE47 => "101111",
        din47_WIDTH => 8,
        CASE48 => "110000",
        din48_WIDTH => 8,
        CASE49 => "110001",
        din49_WIDTH => 8,
        CASE50 => "110010",
        din50_WIDTH => 8,
        CASE51 => "110011",
        din51_WIDTH => 8,
        CASE52 => "110100",
        din52_WIDTH => 8,
        CASE53 => "110101",
        din53_WIDTH => 8,
        CASE54 => "110110",
        din54_WIDTH => 8,
        CASE55 => "110111",
        din55_WIDTH => 8,
        CASE56 => "111000",
        din56_WIDTH => 8,
        CASE57 => "111001",
        din57_WIDTH => 8,
        CASE58 => "111010",
        din58_WIDTH => 8,
        CASE59 => "111011",
        din59_WIDTH => 8,
        CASE60 => "111100",
        din60_WIDTH => 8,
        CASE61 => "111101",
        din61_WIDTH => 8,
        CASE62 => "111110",
        din62_WIDTH => 8,
        CASE63 => "111111",
        din63_WIDTH => 8,
        def_WIDTH => 8,
        sel_WIDTH => 6,
        dout_WIDTH => 8)
    port map (
        din0 => ap_const_lv8_CF,
        din1 => ap_const_lv8_D6,
        din2 => ap_const_lv8_D2,
        din3 => ap_const_lv8_16,
        din4 => ap_const_lv8_F1,
        din5 => ap_const_lv8_3B,
        din6 => ap_const_lv8_47,
        din7 => ap_const_lv8_19,
        din8 => ap_const_lv8_15,
        din9 => ap_const_lv8_C4,
        din10 => ap_const_lv8_ED,
        din11 => ap_const_lv8_3B,
        din12 => ap_const_lv8_2,
        din13 => ap_const_lv8_27,
        din14 => ap_const_lv8_D3,
        din15 => ap_const_lv8_21,
        din16 => ap_const_lv8_EC,
        din17 => ap_const_lv8_E8,
        din18 => ap_const_lv8_E6,
        din19 => ap_const_lv8_2C,
        din20 => ap_const_lv8_29,
        din21 => ap_const_lv8_DB,
        din22 => ap_const_lv8_3F,
        din23 => ap_const_lv8_EB,
        din24 => ap_const_lv8_CC,
        din25 => ap_const_lv8_B2,
        din26 => ap_const_lv8_F,
        din27 => ap_const_lv8_BD,
        din28 => ap_const_lv8_34,
        din29 => ap_const_lv8_CE,
        din30 => ap_const_lv8_B,
        din31 => ap_const_lv8_43,
        din32 => ap_const_lv8_CB,
        din33 => ap_const_lv8_F6,
        din34 => ap_const_lv8_FE,
        din35 => ap_const_lv8_25,
        din36 => ap_const_lv8_13,
        din37 => ap_const_lv8_EB,
        din38 => ap_const_lv8_30,
        din39 => ap_const_lv8_27,
        din40 => ap_const_lv8_FB,
        din41 => ap_const_lv8_FD,
        din42 => ap_const_lv8_D2,
        din43 => ap_const_lv8_CC,
        din44 => ap_const_lv8_FC,
        din45 => ap_const_lv8_36,
        din46 => ap_const_lv8_EA,
        din47 => ap_const_lv8_1E,
        din48 => ap_const_lv8_D8,
        din49 => ap_const_lv8_D7,
        din50 => ap_const_lv8_F3,
        din51 => ap_const_lv8_FB,
        din52 => ap_const_lv8_DF,
        din53 => ap_const_lv8_EB,
        din54 => ap_const_lv8_D3,
        din55 => ap_const_lv8_CC,
        din56 => ap_const_lv8_B,
        din57 => ap_const_lv8_11,
        din58 => ap_const_lv8_1C,
        din59 => ap_const_lv8_FB,
        din60 => ap_const_lv8_33,
        din61 => ap_const_lv8_38,
        din62 => ap_const_lv8_12,
        din63 => ap_const_lv8_6,
        def => b_fu_319_p129,
        sel => b_fu_319_p130,
        dout => b_fu_319_p131);

    flow_control_loop_pipe_sequential_init_U : component feedforward_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    x_fu_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln48_fu_303_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    x_fu_272 <= add_ln48_fu_309_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_272 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln20_reg_629 <= icmp_ln20_fu_587_p2;
                x_1_reg_621 <= ap_sig_allocacmp_x_1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln48_fu_309_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_x_1) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln48_fu_303_p2)
    begin
        if (((icmp_ln48_fu_303_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_x_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, x_fu_272, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_x_1 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_x_1 <= x_fu_272;
        end if; 
    end process;

    b_fu_319_p129 <= "XXXXXXXX";
    b_fu_319_p130 <= ap_sig_allocacmp_x_1(6 - 1 downto 0);
    cnt_fu_602_p3 <= (icmp_ln20_reg_629 & ap_const_lv8_0);
    icmp_ln20_fu_587_p2 <= "1" when (sext_ln18_fu_583_p1 = a_2_reload) else "0";
    icmp_ln48_fu_303_p2 <= "1" when (ap_sig_allocacmp_x_1 = ap_const_lv7_40) else "0";
    layer3_activations_address0 <= zext_ln48_fu_598_p1(6 - 1 downto 0);
    layer3_activations_ce0 <= layer3_activations_ce0_local;

    layer3_activations_ce0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer3_activations_ce0_local <= ap_const_logic_1;
        else 
            layer3_activations_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    layer3_activations_d0 <= zext_ln51_fu_609_p1;
    layer3_activations_we0 <= layer3_activations_we0_local;

    layer3_activations_we0_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer3_activations_we0_local <= ap_const_logic_1;
        else 
            layer3_activations_we0_local <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln18_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b_fu_319_p131),32));

    zext_ln48_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_1_reg_621),64));
    zext_ln51_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cnt_fu_602_p3),32));
end behav;
