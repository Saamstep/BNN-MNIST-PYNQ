// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module feedforward_feedforward_Pipeline_VITIS_LOOP_110_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer1_activations_address0,
        layer1_activations_ce0,
        layer1_activations_q0,
        layer1_activations_2_address0,
        layer1_activations_2_ce0,
        layer1_activations_2_q0,
        a_1_out,
        a_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] layer1_activations_address0;
output   layer1_activations_ce0;
input  [31:0] layer1_activations_q0;
output  [8:0] layer1_activations_2_address0;
output   layer1_activations_2_ce0;
input  [31:0] layer1_activations_2_q0;
output  [31:0] a_1_out;
output   a_1_out_ap_vld;

reg ap_idle;
reg a_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln110_fu_1651_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [9:0] i_reg_1731;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] trunc_ln110_fu_1663_p1;
reg   [0:0] trunc_ln110_reg_1738;
wire   [63:0] zext_ln110_fu_1677_p1;
wire    ap_block_pp0_stage0;
reg   [9:0] i_2_fu_1602;
wire   [9:0] add_ln110_fu_1657_p2;
wire    ap_loop_init;
reg   [9:0] ap_sig_allocacmp_i;
reg   [31:0] a_1_fu_1606;
wire   [31:0] select_ln113_fu_1701_p3;
wire    ap_block_pp0_stage0_01001;
reg    layer1_activations_ce0_local;
reg    layer1_activations_2_ce0_local;
wire   [8:0] lshr_ln2_fu_1667_p4;
wire   [31:0] x_fu_1688_p3;
wire   [0:0] icmp_ln40_fu_1695_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 i_2_fu_1602 = 10'd0;
#0 a_1_fu_1606 = 32'd0;
#0 ap_done_reg = 1'b0;
end

feedforward_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln110_fu_1651_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_2_fu_1602 <= add_ln110_fu_1657_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_2_fu_1602 <= 10'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((i_reg_1731 == 10'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_1_fu_1606[8] <= select_ln113_fu_1701_p3[8];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_1731 <= ap_sig_allocacmp_i;
        trunc_ln110_reg_1738 <= trunc_ln110_fu_1663_p1;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (icmp_ln110_fu_1651_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        a_1_out_ap_vld = 1'b1;
    end else begin
        a_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln110_fu_1651_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 10'd0;
    end else begin
        ap_sig_allocacmp_i = i_2_fu_1602;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_activations_2_ce0_local = 1'b1;
    end else begin
        layer1_activations_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_activations_ce0_local = 1'b1;
    end else begin
        layer1_activations_ce0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_1_out = a_1_fu_1606;

assign add_ln110_fu_1657_p2 = (ap_sig_allocacmp_i + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln110_fu_1651_p2 = ((ap_sig_allocacmp_i == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln40_fu_1695_p2 = (($signed(x_fu_1688_p3) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign layer1_activations_2_address0 = zext_ln110_fu_1677_p1;

assign layer1_activations_2_ce0 = layer1_activations_2_ce0_local;

assign layer1_activations_address0 = zext_ln110_fu_1677_p1;

assign layer1_activations_ce0 = layer1_activations_ce0_local;

assign lshr_ln2_fu_1667_p4 = {{ap_sig_allocacmp_i[9:1]}};

assign select_ln113_fu_1701_p3 = ((icmp_ln40_fu_1695_p2[0:0] == 1'b1) ? 32'd0 : 32'd256);

assign trunc_ln110_fu_1663_p1 = ap_sig_allocacmp_i[0:0];

assign x_fu_1688_p3 = ((trunc_ln110_reg_1738[0:0] == 1'b1) ? layer1_activations_2_q0 : layer1_activations_q0);

assign zext_ln110_fu_1677_p1 = lshr_ln2_fu_1667_p4;

always @ (posedge ap_clk) begin
    a_1_fu_1606[7:0] <= 8'b00000000;
    a_1_fu_1606[31:9] <= 23'b00000000000000000000000;
end

endmodule //feedforward_feedforward_Pipeline_VITIS_LOOP_110_3
