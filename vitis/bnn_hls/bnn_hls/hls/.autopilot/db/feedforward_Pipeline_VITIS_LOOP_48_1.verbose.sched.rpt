

================================================================
== Vitis HLS Report for 'feedforward_Pipeline_VITIS_LOOP_48_1'
================================================================
* Date:           Fri Jun 13 14:38:39 2025

* Version:        2024.2 (Build 5238294 on Nov  8 2024)
* Project:        bnn_hls
* Solution:       hls (Vivado IP Flow Target)
* Product family: zynq
* Target device:  xc7z020-clg400-1


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  |  10.00 ns|  6.935 ns|     2.70 ns|
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+------------------------------------------------+
    |  Latency (cycles) |  Latency (absolute) |  Interval |                    Pipeline                    |
    |   min   |   max   |    min   |    max   | min | max |                      Type                      |
    +---------+---------+----------+----------+-----+-----+------------------------------------------------+
    |      786|      786|  7.860 us|  7.860 us|  785|  785|  loop auto-rewind stp (delay=0 clock cycles(s))|
    +---------+---------+----------+----------+-----+-----+------------------------------------------------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                   |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |     Loop Name     |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- VITIS_LOOP_48_1  |      784|      784|         2|          1|          1|   784|       yes|
        +-------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 0
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 2
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 2


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 2
* Pipeline : 1
  Pipeline-0 : II = 1, D = 2, States = { 1 2 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 6.93>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "%x_1 = alloca i32 1" [bnn.cpp:48->bnn.cpp:100]   --->   Operation 5 'alloca' 'x_1' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "%a_reload_read = read i32 @_ssdm_op_Read.ap_auto.i32, i32 %a_reload"   --->   Operation 6 'read' 'a_reload_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (1.58ns)   --->   "%store_ln48 = store i10 0, i10 %x_1" [bnn.cpp:48->bnn.cpp:100]   --->   Operation 7 'store' 'store_ln48' <Predicate = true> <Delay = 1.58>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "%br_ln0 = br void %for.body.i"   --->   Operation 8 'br' 'br_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "%x = load i10 %x_1" [bnn.cpp:48->bnn.cpp:100]   --->   Operation 9 'load' 'x' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (1.73ns)   --->   "%icmp_ln48 = icmp_eq  i10 %x, i10 784" [bnn.cpp:48->bnn.cpp:100]   --->   Operation 10 'icmp' 'icmp_ln48' <Predicate = true> <Delay = 1.73> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "%speclooptripcount_ln0 = speclooptripcount void @_ssdm_op_SpecLoopTripCount, i64 784, i64 784, i64 784"   --->   Operation 11 'speclooptripcount' 'speclooptripcount_ln0' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (1.73ns)   --->   "%add_ln48 = add i10 %x, i10 1" [bnn.cpp:48->bnn.cpp:100]   --->   Operation 12 'add' 'add_ln48' <Predicate = true> <Delay = 1.73> <CoreInst = "Adder">   --->   Core 1 'Adder' <Latency = 0> <II = 1> <Delay = 1.73> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "%br_ln48 = br i1 %icmp_ln48, void %for.body.split.i, void %matmul_xnor.1.region_end.exitStub" [bnn.cpp:48->bnn.cpp:100]   --->   Operation 13 'br' 'br_ln48' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "%trunc_ln48 = trunc i10 %x" [bnn.cpp:48->bnn.cpp:100]   --->   Operation 14 'trunc' 'trunc_ln48' <Predicate = (!icmp_ln48)> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "%lshr_ln = partselect i9 @_ssdm_op_PartSelect.i9.i10.i32.i32, i10 %x, i32 1, i32 9" [bnn.cpp:48->bnn.cpp:100]   --->   Operation 15 'partselect' 'lshr_ln' <Predicate = (!icmp_ln48)> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns) (grouped into LUT with out node icmp_ln20)   --->   "%b = sparsemux i6 @_ssdm_op_SparseMux.ap_auto.784i6.i6.i10, i10 0, i6 8, i10 1, i6 63, i10 2, i6 4, i10 3, i6 63, i10 4, i6 8, i10 5, i6 6, i10 6, i6 10, i10 7, i6 62, i10 8, i6 61, i10 9, i6 5, i10 10, i6 57, i10 11, i6 10, i10 12, i6 2, i10 13, i6 62, i10 14, i6 61, i10 15, i6 58, i10 16, i6 60, i10 17, i6 3, i10 18, i6 1, i10 19, i6 61, i10 20, i6 58, i10 21, i6 11, i10 22, i6 10, i10 23, i6 59, i10 24, i6 61, i10 25, i6 10, i10 26, i6 2, i10 27, i6 57, i10 28, i6 63, i10 29, i6 5, i10 30, i6 3, i10 31, i6 57, i10 32, i6 3, i10 33, i6 9, i10 34, i6 8, i10 35, i6 58, i10 36, i6 6, i10 37, i6 58, i10 38, i6 11, i10 39, i6 4, i10 40, i6 8, i10 41, i6 7, i10 42, i6 61, i10 43, i6 3, i10 44, i6 0, i10 45, i6 61, i10 46, i6 59, i10 47, i6 3, i10 48, i6 0, i10 49, i6 8, i10 50, i6 61, i10 51, i6 4, i10 52, i6 62, i10 53, i6 60, i10 54, i6 62, i10 55, i6 6, i10 56, i6 5, i10 57, i6 58, i10 58, i6 60, i10 59, i6 60, i10 60, i6 5, i10 61, i6 11, i10 62, i6 9, i10 63, i6 1, i10 64, i6 61, i10 65, i6 59, i10 66, i6 8, i10 67, i6 8, i10 68, i6 60, i10 69, i6 57, i10 70, i6 1, i10 71, i6 61, i10 72, i6 58, i10 73, i6 3, i10 74, i6 63, i10 75, i6 2, i10 76, i6 6, i10 77, i6 3, i10 78, i6 9, i10 79, i6 8, i10 80, i6 9, i10 81, i6 3, i10 82, i6 62, i10 83, i6 3, i10 84, i6 11, i10 85, i6 62, i10 86, i6 60, i10 87, i6 8, i10 88, i6 10, i10 89, i6 3, i10 90, i6 60, i10 91, i6 0, i10 92, i6 0, i10 93, i6 61, i10 94, i6 2, i10 95, i6 53, i10 96, i6 63, i10 97, i6 63, i10 98, i6 2, i10 99, i6 4, i10 100, i6 0, i10 101, i6 4, i10 102, i6 5, i10 103, i6 61, i10 104, i6 0, i10 105, i6 9, i10 106, i6 61, i10 107, i6 9, i10 108, i6 63, i10 109, i6 60, i10 110, i6 3, i10 111, i6 5, i10 112, i6 1, i10 113, i6 9, i10 114, i6 63, i10 115, i6 11, i10 116, i6 5, i10 117, i6 57, i10 118, i6 9, i10 119, i6 56, i10 120, i6 62, i10 121, i6 55, i10 122, i6 2, i10 123, i6 50, i10 124, i6 56, i10 125, i6 1, i10 126, i6 59, i10 127, i6 62, i10 128, i6 3, i10 129, i6 61, i10 130, i6 2, i10 131, i6 62, i10 132, i6 0, i10 133, i6 3, i10 134, i6 4, i10 135, i6 9, i10 136, i6 4, i10 137, i6 10, i10 138, i6 8, i10 139, i6 3, i10 140, i6 5, i10 141, i6 3, i10 142, i6 60, i10 143, i6 62, i10 144, i6 0, i10 145, i6 7, i10 146, i6 5, i10 147, i6 63, i10 148, i6 55, i10 149, i6 55, i10 150, i6 56, i10 151, i6 49, i10 152, i6 2, i10 153, i6 56, i10 154, i6 4, i10 155, i6 1, i10 156, i6 7, i10 157, i6 2, i10 158, i6 5, i10 159, i6 12, i10 160, i6 6, i10 161, i6 63, i10 162, i6 4, i10 163, i6 9, i10 164, i6 0, i10 165, i6 62, i10 166, i6 61, i10 167, i6 0, i10 168, i6 4, i10 169, i6 8, i10 170, i6 59, i10 171, i6 4, i10 172, i6 3, i10 173, i6 62, i10 174, i6 57, i10 175, i6 62, i10 176, i6 48, i10 177, i6 46, i10 178, i6 61, i10 179, i6 58, i10 180, i6 1, i10 181, i6 56, i10 182, i6 0, i10 183, i6 4, i10 184, i6 4, i10 185, i6 63, i10 186, i6 55, i10 187, i6 7, i10 188, i6 4, i10 189, i6 4, i10 190, i6 5, i10 191, i6 0, i10 192, i6 62, i10 193, i6 11, i10 194, i6 61, i10 195, i6 61, i10 196, i6 4, i10 197, i6 7, i10 198, i6 9, i10 199, i6 4, i10 200, i6 58, i10 201, i6 6, i10 202, i6 54, i10 203, i6 58, i10 204, i6 44, i10 205, i6 55, i10 206, i6 61, i10 207, i6 1, i10 208, i6 62, i10 209, i6 53, i10 210, i6 53, i10 211, i6 54, i10 212, i6 55, i10 213, i6 56, i10 214, i6 5, i10 215, i6 5, i10 216, i6 8, i10 217, i6 61, i10 218, i6 4, i10 219, i6 61, i10 220, i6 62, i10 221, i6 61, i10 222, i6 9, i10 223, i6 2, i10 224, i6 4, i10 225, i6 63, i10 226, i6 63, i10 227, i6 0, i10 228, i6 60, i10 229, i6 63, i10 230, i6 61, i10 231, i6 57, i10 232, i6 53, i10 233, i6 60, i10 234, i6 58, i10 235, i6 0, i10 236, i6 61, i10 237, i6 0, i10 238, i6 10, i10 239, i6 58, i10 240, i6 4, i10 241, i6 59, i10 242, i6 59, i10 243, i6 1, i10 244, i6 56, i10 245, i6 12, i10 246, i6 11, i10 247, i6 0, i10 248, i6 0, i10 249, i6 0, i10 250, i6 2, i10 251, i6 2, i10 252, i6 59, i10 253, i6 6, i10 254, i6 7, i10 255, i6 62, i10 256, i6 63, i10 257, i6 61, i10 258, i6 2, i10 259, i6 52, i10 260, i6 45, i10 261, i6 47, i10 262, i6 2, i10 263, i6 4, i10 264, i6 2, i10 265, i6 5, i10 266, i6 1, i10 267, i6 0, i10 268, i6 56, i10 269, i6 6, i10 270, i6 58, i10 271, i6 7, i10 272, i6 61, i10 273, i6 3, i10 274, i6 5, i10 275, i6 3, i10 276, i6 63, i10 277, i6 6, i10 278, i6 4, i10 279, i6 59, i10 280, i6 10, i10 281, i6 63, i10 282, i6 1, i10 283, i6 3, i10 284, i6 6, i10 285, i6 59, i10 286, i6 57, i10 287, i6 54, i10 288, i6 59, i10 289, i6 61, i10 290, i6 1, i10 291, i6 3, i10 292, i6 12, i10 293, i6 16, i10 294, i6 13, i10 295, i6 13, i10 296, i6 1, i10 297, i6 58, i10 298, i6 7, i10 299, i6 62, i10 300, i6 2, i10 301, i6 58, i10 302, i6 3, i10 303, i6 7, i10 304, i6 4, i10 305, i6 61, i10 306, i6 11, i10 307, i6 10, i10 308, i6 6, i10 309, i6 9, i10 310, i6 63, i10 311, i6 9, i10 312, i6 57, i10 313, i6 5, i10 314, i6 56, i10 315, i6 63, i10 316, i6 51, i10 317, i6 48, i10 318, i6 51, i10 319, i6 9, i10 320, i6 20, i10 321, i6 16, i10 322, i6 19, i10 323, i6 10, i10 324, i6 0, i10 325, i6 9, i10 326, i6 0, i10 327, i6 7, i10 328, i6 3, i10 329, i6 56, i10 330, i6 56, i10 331, i6 12, i10 332, i6 8, i10 333, i6 10, i10 334, i6 60, i10 335, i6 1, i10 336, i6 59, i10 337, i6 58, i10 338, i6 6, i10 339, i6 6, i10 340, i6 8, i10 341, i6 57, i10 342, i6 58, i10 343, i6 54, i10 344, i6 53, i10 345, i6 46, i10 346, i6 0, i10 347, i6 2, i10 348, i6 12, i10 349, i6 23, i10 350, i6 19, i10 351, i6 20, i10 352, i6 6, i10 353, i6 1, i10 354, i6 2, i10 355, i6 0, i10 356, i6 60, i10 357, i6 56, i10 358, i6 63, i10 359, i6 9, i10 360, i6 6, i10 361, i6 5, i10 362, i6 5, i10 363, i6 59, i10 364, i6 7, i10 365, i6 62, i10 366, i6 62, i10 367, i6 5, i10 368, i6 62, i10 369, i6 56, i10 370, i6 54, i10 371, i6 61, i10 372, i6 53, i10 373, i6 57, i10 374, i6 63, i10 375, i6 3, i10 376, i6 8, i10 377, i6 3, i10 378, i6 16, i10 379, i6 16, i10 380, i6 6, i10 381, i6 58, i10 382, i6 58, i10 383, i6 52, i10 384, i6 63, i10 385, i6 63, i10 386, i6 3, i10 387, i6 2, i10 388, i6 62, i10 389, i6 2, i10 390, i6 1, i10 391, i6 8, i10 392, i6 9, i10 393, i6 9, i10 394, i6 10, i10 395, i6 63, i10 396, i6 8, i10 397, i6 3, i10 398, i6 52, i10 399, i6 52, i10 400, i6 58, i10 401, i6 53, i10 402, i6 53, i10 403, i6 55, i10 404, i6 62, i10 405, i6 9, i10 406, i6 14, i10 407, i6 6, i10 408, i6 3, i10 409, i6 52, i10 410, i6 56, i10 411, i6 60, i10 412, i6 63, i10 413, i6 1, i10 414, i6 0, i10 415, i6 0, i10 416, i6 62, i10 417, i6 7, i10 418, i6 10, i10 419, i6 8, i10 420, i6 10, i10 421, i6 0, i10 422, i6 9, i10 423, i6 9, i10 424, i6 1, i10 425, i6 1, i10 426, i6 5, i10 427, i6 55, i10 428, i6 49, i10 429, i6 52, i10 430, i6 54, i10 431, i6 54, i10 432, i6 62, i10 433, i6 0, i10 434, i6 10, i10 435, i6 61, i10 436, i6 53, i10 437, i6 54, i10 438, i6 2, i10 439, i6 2, i10 440, i6 55, i10 441, i6 53, i10 442, i6 59, i10 443, i6 60, i10 444, i6 63, i10 445, i6 3, i10 446, i6 3, i10 447, i6 7, i10 448, i6 63, i10 449, i6 11, i10 450, i6 63, i10 451, i6 10, i10 452, i6 9, i10 453, i6 61, i10 454, i6 2, i10 455, i6 59, i10 456, i6 52, i10 457, i6 52, i10 458, i6 47, i10 459, i6 51, i10 460, i6 62, i10 461, i6 54, i10 462, i6 9, i10 463, i6 3, i10 464, i6 55, i10 465, i6 57, i10 466, i6 54, i10 467, i6 55, i10 468, i6 1, i10 469, i6 53, i10 470, i6 54, i10 471, i6 63, i10 472, i6 62, i10 473, i6 6, i10 474, i6 62, i10 475, i6 60, i10 476, i6 61, i10 477, i6 4, i10 478, i6 0, i10 479, i6 5, i10 480, i6 58, i10 481, i6 60, i10 482, i6 2, i10 483, i6 9, i10 484, i6 53, i10 485, i6 62, i10 486, i6 55, i10 487, i6 48, i10 488, i6 49, i10 489, i6 3, i10 490, i6 63, i10 491, i6 61, i10 492, i6 61, i10 493, i6 63, i10 494, i6 53, i10 495, i6 55, i10 496, i6 63, i10 497, i6 63, i10 498, i6 60, i10 499, i6 53, i10 500, i6 5, i10 501, i6 54, i10 502, i6 7, i10 503, i6 5, i10 504, i6 63, i10 505, i6 11, i10 506, i6 6, i10 507, i6 1, i10 508, i6 63, i10 509, i6 5, i10 510, i6 1, i10 511, i6 4, i10 512, i6 62, i10 513, i6 59, i10 514, i6 55, i10 515, i6 54, i10 516, i6 60, i10 517, i6 5, i10 518, i6 10, i10 519, i6 7, i10 520, i6 11, i10 521, i6 57, i10 522, i6 63, i10 523, i6 56, i10 524, i6 52, i10 525, i6 52, i10 526, i6 53, i10 527, i6 1, i10 528, i6 2, i10 529, i6 8, i10 530, i6 4, i10 531, i6 57, i10 532, i6 60, i10 533, i6 11, i10 534, i6 58, i10 535, i6 63, i10 536, i6 58, i10 537, i6 3, i10 538, i6 59, i10 539, i6 4, i10 540, i6 9, i10 541, i6 5, i10 542, i6 7, i10 543, i6 62, i10 544, i6 63, i10 545, i6 5, i10 546, i6 16, i10 547, i6 10, i10 548, i6 1, i10 549, i6 1, i10 550, i6 1, i10 551, i6 52, i10 552, i6 62, i10 553, i6 47, i10 554, i6 54, i10 555, i6 0, i10 556, i6 5, i10 557, i6 2, i10 558, i6 10, i10 559, i6 9, i10 560, i6 11, i10 561, i6 5, i10 562, i6 62, i10 563, i6 4, i10 564, i6 6, i10 565, i6 63, i10 566, i6 62, i10 567, i6 8, i10 568, i6 5, i10 569, i6 5, i10 570, i6 7, i10 571, i6 7, i10 572, i6 1, i10 573, i6 1, i10 574, i6 0, i10 575, i6 0, i10 576, i6 4, i10 577, i6 0, i10 578, i6 0, i10 579, i6 62, i10 580, i6 46, i10 581, i6 1, i10 582, i6 60, i10 583, i6 3, i10 584, i6 61, i10 585, i6 4, i10 586, i6 3, i10 587, i6 2, i10 588, i6 4, i10 589, i6 59, i10 590, i6 6, i10 591, i6 59, i10 592, i6 60, i10 593, i6 7, i10 594, i6 2, i10 595, i6 13, i10 596, i6 7, i10 597, i6 4, i10 598, i6 10, i10 599, i6 57, i10 600, i6 61, i10 601, i6 3, i10 602, i6 57, i10 603, i6 56, i10 604, i6 63, i10 605, i6 47, i10 606, i6 44, i10 607, i6 56, i10 608, i6 45, i10 609, i6 0, i10 610, i6 2, i10 611, i6 55, i10 612, i6 63, i10 613, i6 9, i10 614, i6 11, i10 615, i6 8, i10 616, i6 61, i10 617, i6 5, i10 618, i6 57, i10 619, i6 8, i10 620, i6 58, i10 621, i6 10, i10 622, i6 62, i10 623, i6 0, i10 624, i6 13, i10 625, i6 7, i10 626, i6 13, i10 627, i6 62, i10 628, i6 0, i10 629, i6 61, i10 630, i6 5, i10 631, i6 1, i10 632, i6 61, i10 633, i6 50, i10 634, i6 56, i10 635, i6 52, i10 636, i6 49, i10 637, i6 57, i10 638, i6 63, i10 639, i6 58, i10 640, i6 58, i10 641, i6 7, i10 642, i6 63, i10 643, i6 3, i10 644, i6 62, i10 645, i6 1, i10 646, i6 59, i10 647, i6 57, i10 648, i6 57, i10 649, i6 10, i10 650, i6 4, i10 651, i6 63, i10 652, i6 63, i10 653, i6 4, i10 654, i6 5, i10 655, i6 13, i10 656, i6 6, i10 657, i6 0, i10 658, i6 3, i10 659, i6 7, i10 660, i6 63, i10 661, i6 6, i10 662, i6 60, i10 663, i6 62, i10 664, i6 56, i10 665, i6 1, i10 666, i6 55, i10 667, i6 9, i10 668, i6 8, i10 669, i6 7, i10 670, i6 63, i10 671, i6 61, i10 672, i6 60, i10 673, i6 61, i10 674, i6 3, i10 675, i6 63, i10 676, i6 5, i10 677, i6 57, i10 678, i6 6, i10 679, i6 58, i10 680, i6 1, i10 681, i6 62, i10 682, i6 4, i10 683, i6 63, i10 684, i6 3, i10 685, i6 63, i10 686, i6 52, i10 687, i6 1, i10 688, i6 56, i10 689, i6 54, i10 690, i6 1, i10 691, i6 58, i10 692, i6 63, i10 693, i6 8, i10 694, i6 57, i10 695, i6 4, i10 696, i6 59, i10 697, i6 60, i10 698, i6 58, i10 699, i6 7, i10 700, i6 60, i10 701, i6 2, i10 702, i6 4, i10 703, i6 8, i10 704, i6 59, i10 705, i6 57, i10 706, i6 63, i10 707, i6 0, i10 708, i6 57, i10 709, i6 7, i10 710, i6 3, i10 711, i6 59, i10 712, i6 63, i10 713, i6 54, i10 714, i6 62, i10 715, i6 59, i10 716, i6 7, i10 717, i6 58, i10 718, i6 3, i10 719, i6 63, i10 720, i6 57, i10 721, i6 1, i10 722, i6 62, i10 723, i6 11, i10 724, i6 11, i10 725, i6 62, i10 726, i6 3, i10 727, i6 11, i10 728, i6 3, i10 729, i6 7, i10 730, i6 3, i10 731, i6 5, i10 732, i6 9, i10 733, i6 9, i10 734, i6 57, i10 735, i6 58, i10 736, i6 5, i10 737, i6 3, i10 738, i6 2, i10 739, i6 57, i10 740, i6 55, i10 741, i6 2, i10 742, i6 57, i10 743, i6 55, i10 744, i6 59, i10 745, i6 4, i10 746, i6 59, i10 747, i6 5, i10 748, i6 61, i10 749, i6 3, i10 750, i6 0, i10 751, i6 1, i10 752, i6 0, i10 753, i6 10, i10 754, i6 7, i10 755, i6 7, i10 756, i6 60, i10 757, i6 11, i10 758, i6 7, i10 759, i6 2, i10 760, i6 8, i10 761, i6 1, i10 762, i6 10, i10 763, i6 4, i10 764, i6 63, i10 765, i6 1, i10 766, i6 63, i10 767, i6 9, i10 768, i6 11, i10 769, i6 3, i10 770, i6 6, i10 771, i6 0, i10 772, i6 2, i10 773, i6 10, i10 774, i6 4, i10 775, i6 58, i10 776, i6 3, i10 777, i6 61, i10 778, i6 63, i10 779, i6 11, i10 780, i6 60, i10 781, i6 2, i10 782, i6 59, i10 783, i6 10, i6 0, i10 %x" [bnn.cpp:55->bnn.cpp:100]   --->   Operation 16 'sparsemux' 'b' <Predicate = (!icmp_ln48)> <Delay = 0.00> <CoreInst = "BinarySparseMux_DontCare">   --->   Core 137 'BinarySparseMux_DontCare' <Latency = 0> <II = 1> <Delay = 5.34> <FuncUnit> <Opcode : 'sparsemux'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 17 [1/1] (0.00ns) (grouped into LUT with out node icmp_ln20)   --->   "%sext_ln18 = sext i6 %b" [bnn.cpp:18->bnn.cpp:55->bnn.cpp:100]   --->   Operation 17 'sext' 'sext_ln18' <Predicate = (!icmp_ln48)> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (5.34ns) (out node of the LUT)   --->   "%icmp_ln20 = icmp_eq  i32 %sext_ln18, i32 %a_reload_read" [bnn.cpp:20->bnn.cpp:55->bnn.cpp:100]   --->   Operation 18 'icmp' 'icmp_ln20' <Predicate = (!icmp_ln48)> <Delay = 5.34> <CoreInst = "Cmp">   --->   Core 9 'Cmp' <Latency = 0> <II = 1> <Delay = 2.55> <FuncUnit> <Opcode : 'seteq' 'setne' 'setle' 'setge' 'setlt' 'setgt'> <InPorts = 2> <OutPorts = 1>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "%br_ln57 = br i1 %trunc_ln48, void %arrayidx93.case.0.i, void %arrayidx93.case.1.i" [bnn.cpp:57->bnn.cpp:100]   --->   Operation 19 'br' 'br_ln57' <Predicate = (!icmp_ln48)> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (1.58ns)   --->   "%store_ln48 = store i10 %add_ln48, i10 %x_1" [bnn.cpp:48->bnn.cpp:100]   --->   Operation 20 'store' 'store_ln48' <Predicate = (!icmp_ln48)> <Delay = 1.58>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "%br_ln48 = br void %for.body.i" [bnn.cpp:48->bnn.cpp:100]   --->   Operation 21 'br' 'br_ln48' <Predicate = (!icmp_ln48)> <Delay = 0.00>
ST_1 : Operation 33 [1/1] (1.58ns)   --->   "%ret_ln0 = ret"   --->   Operation 33 'ret' 'ret_ln0' <Predicate = (icmp_ln48)> <Delay = 1.58>

State 2 <SV = 1> <Delay = 3.25>
ST_2 : Operation 22 [1/1] (0.00ns)   --->   "%specpipeline_ln50 = specpipeline void @_ssdm_op_SpecPipeline, i32 1, i32 0, i32 0, i32 0, void @empty_1" [bnn.cpp:50->bnn.cpp:100]   --->   Operation 22 'specpipeline' 'specpipeline_ln50' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 23 [1/1] (0.00ns)   --->   "%specloopname_ln48 = specloopname void @_ssdm_op_SpecLoopName, void @empty_14" [bnn.cpp:48->bnn.cpp:100]   --->   Operation 23 'specloopname' 'specloopname_ln48' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 24 [1/1] (0.00ns)   --->   "%zext_ln48 = zext i9 %lshr_ln" [bnn.cpp:48->bnn.cpp:100]   --->   Operation 24 'zext' 'zext_ln48' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 25 [1/1] (0.00ns)   --->   "%cnt = bitconcatenate i9 @_ssdm_op_BitConcatenate.i9.i1.i8, i1 %icmp_ln20, i8 0" [bnn.cpp:55->bnn.cpp:100]   --->   Operation 25 'bitconcatenate' 'cnt' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 26 [1/1] (0.00ns)   --->   "%zext_ln51 = zext i9 %cnt" [bnn.cpp:51->bnn.cpp:100]   --->   Operation 26 'zext' 'zext_ln51' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 27 [1/1] (0.00ns)   --->   "%layer1_activations_addr = getelementptr i32 %layer1_activations, i64 0, i64 %zext_ln48" [bnn.cpp:57->bnn.cpp:100]   --->   Operation 27 'getelementptr' 'layer1_activations_addr' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 28 [1/1] (0.00ns)   --->   "%layer1_activations_2_addr = getelementptr i32 %layer1_activations_2, i64 0, i64 %zext_ln48" [bnn.cpp:57->bnn.cpp:100]   --->   Operation 28 'getelementptr' 'layer1_activations_2_addr' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 29 [1/1] ( I:3.25ns O:3.25ns )   --->   "%store_ln57 = store i32 %zext_ln51, i9 %layer1_activations_addr" [bnn.cpp:57->bnn.cpp:100]   --->   Operation 29 'store' 'store_ln57' <Predicate = (!trunc_ln48)> <Delay = 3.25> <CoreInst = "RAM">   --->   Core 81 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 392> <RAM>
ST_2 : Operation 30 [1/1] (0.00ns)   --->   "%br_ln57 = br void %arrayidx93.exit.i" [bnn.cpp:57->bnn.cpp:100]   --->   Operation 30 'br' 'br_ln57' <Predicate = (!trunc_ln48)> <Delay = 0.00>
ST_2 : Operation 31 [1/1] ( I:3.25ns O:3.25ns )   --->   "%store_ln57 = store i32 %zext_ln51, i9 %layer1_activations_2_addr" [bnn.cpp:57->bnn.cpp:100]   --->   Operation 31 'store' 'store_ln57' <Predicate = (trunc_ln48)> <Delay = 3.25> <CoreInst = "RAM">   --->   Core 81 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 392> <RAM>
ST_2 : Operation 32 [1/1] (0.00ns)   --->   "%br_ln57 = br void %arrayidx93.exit.i" [bnn.cpp:57->bnn.cpp:100]   --->   Operation 32 'br' 'br_ln57' <Predicate = (trunc_ln48)> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10.000ns, clock uncertainty: 2.700ns.

 <State 1>: 6.935ns
The critical path consists of the following:
	'store' operation 0 bit ('store_ln48', bnn.cpp:48->bnn.cpp:100) of constant 0 on local variable 'x', bnn.cpp:48->bnn.cpp:100 [6]  (1.588 ns)
	'load' operation 10 bit ('x', bnn.cpp:48->bnn.cpp:100) on local variable 'x', bnn.cpp:48->bnn.cpp:100 [9]  (0.000 ns)
	'sparsemux' operation 6 bit ('b', bnn.cpp:55->bnn.cpp:100) [20]  (0.000 ns)
	'icmp' operation 1 bit ('icmp_ln20', bnn.cpp:20->bnn.cpp:55->bnn.cpp:100) [22]  (5.347 ns)

 <State 2>: 3.254ns
The critical path consists of the following:
	'getelementptr' operation 9 bit ('layer1_activations_2_addr', bnn.cpp:57->bnn.cpp:100) [26]  (0.000 ns)
	'store' operation 0 bit ('store_ln57', bnn.cpp:57->bnn.cpp:100) of variable 'zext_ln51', bnn.cpp:51->bnn.cpp:100 on array 'layer1_activations_2' [32]  (3.254 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
