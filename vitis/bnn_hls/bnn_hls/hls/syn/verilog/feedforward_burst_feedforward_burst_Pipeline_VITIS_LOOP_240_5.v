// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module feedforward_burst_feedforward_burst_Pipeline_VITIS_LOOP_240_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer2_activations_address0,
        layer2_activations_ce0,
        layer2_activations_q0,
        layer2_activations_1_address0,
        layer2_activations_1_ce0,
        layer2_activations_1_q0,
        layer2_activations_2_address0,
        layer2_activations_2_ce0,
        layer2_activations_2_q0,
        layer2_activations_3_address0,
        layer2_activations_3_ce0,
        layer2_activations_3_q0,
        layer2_quant_address0,
        layer2_quant_ce0,
        layer2_quant_we0,
        layer2_quant_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] layer2_activations_address0;
output   layer2_activations_ce0;
input  [31:0] layer2_activations_q0;
output  [3:0] layer2_activations_1_address0;
output   layer2_activations_1_ce0;
input  [31:0] layer2_activations_1_q0;
output  [3:0] layer2_activations_2_address0;
output   layer2_activations_2_ce0;
input  [31:0] layer2_activations_2_q0;
output  [3:0] layer2_activations_3_address0;
output   layer2_activations_3_ce0;
input  [31:0] layer2_activations_3_q0;
output  [5:0] layer2_quant_address0;
output   layer2_quant_ce0;
output   layer2_quant_we0;
output  [0:0] layer2_quant_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln240_fu_129_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [6:0] i_2_reg_208;
wire    ap_block_pp0_stage0_11001;
reg   [6:0] i_2_reg_208_pp0_iter1_reg;
wire   [0:0] icmp_ln32_fu_191_p2;
reg   [0:0] icmp_ln32_reg_238;
wire   [63:0] zext_ln240_1_fu_151_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln240_fu_197_p1;
reg   [6:0] i_fu_52;
wire   [6:0] add_ln240_fu_135_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_2;
reg    layer2_activations_ce0_local;
reg    layer2_activations_1_ce0_local;
reg    layer2_activations_2_ce0_local;
reg    layer2_activations_3_ce0_local;
reg    layer2_quant_we0_local;
reg    layer2_quant_ce0_local;
wire   [3:0] lshr_ln4_fu_141_p4;
wire   [31:0] x_assign_2_fu_167_p9;
wire   [1:0] x_assign_2_fu_167_p10;
wire   [31:0] x_assign_2_fu_167_p11;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [1:0] x_assign_2_fu_167_p1;
wire   [1:0] x_assign_2_fu_167_p3;
wire  signed [1:0] x_assign_2_fu_167_p5;
wire  signed [1:0] x_assign_2_fu_167_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 i_fu_52 = 7'd0;
#0 ap_done_reg = 1'b0;
end

(* dissolve_hierarchy = "yes" *) feedforward_burst_sparsemux_9_2_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 2'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 2'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 2'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 2'h3 ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
sparsemux_9_2_32_1_1_U26(
    .din0(layer2_activations_q0),
    .din1(layer2_activations_1_q0),
    .din2(layer2_activations_2_q0),
    .din3(layer2_activations_3_q0),
    .def(x_assign_2_fu_167_p9),
    .sel(x_assign_2_fu_167_p10),
    .dout(x_assign_2_fu_167_p11)
);

feedforward_burst_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln240_fu_129_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_52 <= add_ln240_fu_135_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_52 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        i_2_reg_208 <= ap_sig_allocacmp_i_2;
        i_2_reg_208_pp0_iter1_reg <= i_2_reg_208;
        icmp_ln32_reg_238 <= icmp_ln32_fu_191_p2;
    end
end

always @ (*) begin
    if (((icmp_ln240_fu_129_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_52;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_activations_1_ce0_local = 1'b1;
    end else begin
        layer2_activations_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_activations_2_ce0_local = 1'b1;
    end else begin
        layer2_activations_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_activations_3_ce0_local = 1'b1;
    end else begin
        layer2_activations_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_activations_ce0_local = 1'b1;
    end else begin
        layer2_activations_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer2_quant_ce0_local = 1'b1;
    end else begin
        layer2_quant_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer2_quant_we0_local = 1'b1;
    end else begin
        layer2_quant_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln240_fu_135_p2 = (ap_sig_allocacmp_i_2 + 7'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign icmp_ln240_fu_129_p2 = ((ap_sig_allocacmp_i_2 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_191_p2 = (($signed(x_assign_2_fu_167_p11) < $signed(32'd1)) ? 1'b1 : 1'b0);

assign layer2_activations_1_address0 = zext_ln240_1_fu_151_p1;

assign layer2_activations_1_ce0 = layer2_activations_1_ce0_local;

assign layer2_activations_2_address0 = zext_ln240_1_fu_151_p1;

assign layer2_activations_2_ce0 = layer2_activations_2_ce0_local;

assign layer2_activations_3_address0 = zext_ln240_1_fu_151_p1;

assign layer2_activations_3_ce0 = layer2_activations_3_ce0_local;

assign layer2_activations_address0 = zext_ln240_1_fu_151_p1;

assign layer2_activations_ce0 = layer2_activations_ce0_local;

assign layer2_quant_address0 = zext_ln240_fu_197_p1;

assign layer2_quant_ce0 = layer2_quant_ce0_local;

assign layer2_quant_d0 = icmp_ln32_reg_238;

assign layer2_quant_we0 = layer2_quant_we0_local;

assign lshr_ln4_fu_141_p4 = {{ap_sig_allocacmp_i_2[5:2]}};

assign x_assign_2_fu_167_p10 = i_2_reg_208[1:0];

assign x_assign_2_fu_167_p9 = 'bx;

assign zext_ln240_1_fu_151_p1 = lshr_ln4_fu_141_p4;

assign zext_ln240_fu_197_p1 = i_2_reg_208_pp0_iter1_reg;

endmodule //feedforward_burst_feedforward_burst_Pipeline_VITIS_LOOP_240_5
