// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module feedforward_burst_feedforward_burst_Pipeline_VITIS_LOOP_49_1_VITIS_LOOP_52_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        X0_input_address0,
        X0_input_ce0,
        X0_input_q0,
        layer1_activations_address0,
        layer1_activations_ce0,
        layer1_activations_we0,
        layer1_activations_d0,
        layer1_activations_1_address0,
        layer1_activations_1_ce0,
        layer1_activations_1_we0,
        layer1_activations_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] X0_input_address0;
output   X0_input_ce0;
input  [31:0] X0_input_q0;
output  [5:0] layer1_activations_address0;
output   layer1_activations_ce0;
output   layer1_activations_we0;
output  [31:0] layer1_activations_d0;
output  [5:0] layer1_activations_1_address0;
output   layer1_activations_1_ce0;
output   layer1_activations_1_we0;
output  [31:0] layer1_activations_1_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln49_fu_141_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [16:0] W1_address0;
wire   [0:0] W1_q0;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln5211_fu_170_p2;
reg   [0:0] icmp_ln5211_reg_329;
reg   [0:0] icmp_ln5211_reg_329_pp0_iter2_reg;
reg   [0:0] icmp_ln5211_reg_329_pp0_iter3_reg;
reg   [0:0] icmp_ln5211_reg_329_pp0_iter4_reg;
reg   [0:0] icmp_ln5211_reg_329_pp0_iter5_reg;
wire   [9:0] select_ln49_fu_176_p3;
reg   [9:0] select_ln49_reg_334;
reg   [9:0] select_ln49_reg_334_pp0_iter2_reg;
reg   [9:0] select_ln49_reg_334_pp0_iter3_reg;
wire   [0:0] trunc_ln49_fu_196_p1;
reg   [0:0] trunc_ln49_reg_345;
reg   [0:0] trunc_ln49_reg_345_pp0_iter2_reg;
reg   [0:0] trunc_ln49_reg_345_pp0_iter3_reg;
reg   [0:0] trunc_ln49_reg_345_pp0_iter4_reg;
reg   [0:0] trunc_ln49_reg_345_pp0_iter5_reg;
wire   [0:0] icmp_ln52_fu_206_p2;
reg   [0:0] icmp_ln52_reg_349;
reg   [0:0] icmp_ln52_reg_349_pp0_iter2_reg;
reg   [0:0] icmp_ln52_reg_349_pp0_iter3_reg;
reg   [0:0] icmp_ln52_reg_349_pp0_iter4_reg;
reg   [0:0] icmp_ln52_reg_349_pp0_iter5_reg;
reg   [5:0] lshr_ln_reg_353;
reg   [5:0] lshr_ln_reg_353_pp0_iter2_reg;
reg   [5:0] lshr_ln_reg_353_pp0_iter3_reg;
reg   [5:0] lshr_ln_reg_353_pp0_iter4_reg;
reg   [5:0] lshr_ln_reg_353_pp0_iter5_reg;
wire   [0:0] icmp_ln23_fu_247_p2;
reg   [0:0] icmp_ln23_reg_373;
wire   [63:0] zext_ln52_1_fu_235_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln54_fu_239_p1;
wire   [63:0] zext_ln49_fu_278_p1;
reg   [9:0] cnt_fu_50;
wire   [9:0] cnt_2_fu_266_p2;
wire    ap_loop_init;
reg   [9:0] y_fu_54;
wire   [9:0] add_ln52_fu_200_p2;
reg   [7:0] x_fu_58;
wire   [7:0] select_ln49_2_fu_184_p3;
reg   [16:0] indvar_flatten_fu_62;
wire   [16:0] add_ln49_2_fu_147_p2;
reg   [16:0] ap_sig_allocacmp_indvar_flatten_load;
reg    X0_input_ce0_local;
reg    W1_ce0_local;
reg    layer1_activations_we0_local;
wire   [31:0] zext_ln52_3_fu_272_p1;
reg    layer1_activations_ce0_local;
reg    layer1_activations_1_we0_local;
reg    layer1_activations_1_ce0_local;
wire   [7:0] add_ln49_fu_164_p2;
wire   [16:0] grp_fu_288_p3;
wire   [31:0] zext_ln22_fu_243_p1;
wire   [9:0] zext_ln54_1_fu_263_p1;
wire   [9:0] select_ln49_1_fu_256_p3;
wire   [9:0] grp_fu_288_p0;
wire   [7:0] grp_fu_288_p1;
wire   [9:0] grp_fu_288_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire   [16:0] grp_fu_288_p10;
wire   [16:0] grp_fu_288_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 cnt_fu_50 = 10'd0;
#0 y_fu_54 = 10'd0;
#0 x_fu_58 = 8'd0;
#0 indvar_flatten_fu_62 = 17'd0;
#0 ap_done_reg = 1'b0;
end

feedforward_burst_feedforward_burst_Pipeline_VITIS_LOOP_49_1_VITIS_LOOP_52_2_W1_ROM_AUTO_1R #(
    .DataWidth( 1 ),
    .AddressRange( 100352 ),
    .AddressWidth( 17 ))
W1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W1_address0),
    .ce0(W1_ce0_local),
    .q0(W1_q0)
);

feedforward_burst_mac_muladd_10ns_8ns_10ns_17_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 17 ))
mac_muladd_10ns_8ns_10ns_17_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_288_p0),
    .din1(grp_fu_288_p1),
    .din2(grp_fu_288_p2),
    .ce(1'b1),
    .dout(grp_fu_288_p3)
);

feedforward_burst_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            cnt_fu_50 <= 10'd0;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            cnt_fu_50 <= cnt_2_fu_266_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln49_fu_141_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_62 <= add_ln49_2_fu_147_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_62 <= 17'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            x_fu_58 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            x_fu_58 <= select_ln49_2_fu_184_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            y_fu_54 <= 10'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            y_fu_54 <= add_ln52_fu_200_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln5211_reg_329 <= icmp_ln5211_fu_170_p2;
        icmp_ln52_reg_349 <= icmp_ln52_fu_206_p2;
        lshr_ln_reg_353 <= {{select_ln49_2_fu_184_p3[6:1]}};
        select_ln49_reg_334 <= select_ln49_fu_176_p3;
        trunc_ln49_reg_345 <= trunc_ln49_fu_196_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        icmp_ln23_reg_373 <= icmp_ln23_fu_247_p2;
        icmp_ln5211_reg_329_pp0_iter2_reg <= icmp_ln5211_reg_329;
        icmp_ln5211_reg_329_pp0_iter3_reg <= icmp_ln5211_reg_329_pp0_iter2_reg;
        icmp_ln5211_reg_329_pp0_iter4_reg <= icmp_ln5211_reg_329_pp0_iter3_reg;
        icmp_ln5211_reg_329_pp0_iter5_reg <= icmp_ln5211_reg_329_pp0_iter4_reg;
        icmp_ln52_reg_349_pp0_iter2_reg <= icmp_ln52_reg_349;
        icmp_ln52_reg_349_pp0_iter3_reg <= icmp_ln52_reg_349_pp0_iter2_reg;
        icmp_ln52_reg_349_pp0_iter4_reg <= icmp_ln52_reg_349_pp0_iter3_reg;
        icmp_ln52_reg_349_pp0_iter5_reg <= icmp_ln52_reg_349_pp0_iter4_reg;
        lshr_ln_reg_353_pp0_iter2_reg <= lshr_ln_reg_353;
        lshr_ln_reg_353_pp0_iter3_reg <= lshr_ln_reg_353_pp0_iter2_reg;
        lshr_ln_reg_353_pp0_iter4_reg <= lshr_ln_reg_353_pp0_iter3_reg;
        lshr_ln_reg_353_pp0_iter5_reg <= lshr_ln_reg_353_pp0_iter4_reg;
        select_ln49_reg_334_pp0_iter2_reg <= select_ln49_reg_334;
        select_ln49_reg_334_pp0_iter3_reg <= select_ln49_reg_334_pp0_iter2_reg;
        trunc_ln49_reg_345_pp0_iter2_reg <= trunc_ln49_reg_345;
        trunc_ln49_reg_345_pp0_iter3_reg <= trunc_ln49_reg_345_pp0_iter2_reg;
        trunc_ln49_reg_345_pp0_iter4_reg <= trunc_ln49_reg_345_pp0_iter3_reg;
        trunc_ln49_reg_345_pp0_iter5_reg <= trunc_ln49_reg_345_pp0_iter4_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        W1_ce0_local = 1'b1;
    end else begin
        W1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        X0_input_ce0_local = 1'b1;
    end else begin
        X0_input_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln49_fu_141_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 17'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_62;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        layer1_activations_1_ce0_local = 1'b1;
    end else begin
        layer1_activations_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln52_reg_349_pp0_iter5_reg == 1'd1) & (trunc_ln49_reg_345_pp0_iter5_reg == 1'd1))) begin
        layer1_activations_1_we0_local = 1'b1;
    end else begin
        layer1_activations_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        layer1_activations_ce0_local = 1'b1;
    end else begin
        layer1_activations_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (icmp_ln52_reg_349_pp0_iter5_reg == 1'd1) & (trunc_ln49_reg_345_pp0_iter5_reg == 1'd0))) begin
        layer1_activations_we0_local = 1'b1;
    end else begin
        layer1_activations_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign W1_address0 = zext_ln54_fu_239_p1;

assign X0_input_address0 = zext_ln52_1_fu_235_p1;

assign X0_input_ce0 = X0_input_ce0_local;

assign add_ln49_2_fu_147_p2 = (ap_sig_allocacmp_indvar_flatten_load + 17'd1);

assign add_ln49_fu_164_p2 = (x_fu_58 + 8'd1);

assign add_ln52_fu_200_p2 = (select_ln49_fu_176_p3 + 10'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign cnt_2_fu_266_p2 = (zext_ln54_1_fu_263_p1 + select_ln49_1_fu_256_p3);

assign grp_fu_288_p0 = 17'd784;

assign grp_fu_288_p1 = grp_fu_288_p10;

assign grp_fu_288_p10 = select_ln49_2_fu_184_p3;

assign grp_fu_288_p2 = grp_fu_288_p20;

assign grp_fu_288_p20 = select_ln49_reg_334_pp0_iter2_reg;

assign icmp_ln23_fu_247_p2 = ((X0_input_q0 == zext_ln22_fu_243_p1) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_141_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 17'd100352) ? 1'b1 : 1'b0);

assign icmp_ln5211_fu_170_p2 = ((y_fu_54 == 10'd784) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_206_p2 = ((add_ln52_fu_200_p2 == 10'd784) ? 1'b1 : 1'b0);

assign layer1_activations_1_address0 = zext_ln49_fu_278_p1;

assign layer1_activations_1_ce0 = layer1_activations_1_ce0_local;

assign layer1_activations_1_d0 = zext_ln52_3_fu_272_p1;

assign layer1_activations_1_we0 = layer1_activations_1_we0_local;

assign layer1_activations_address0 = zext_ln49_fu_278_p1;

assign layer1_activations_ce0 = layer1_activations_ce0_local;

assign layer1_activations_d0 = zext_ln52_3_fu_272_p1;

assign layer1_activations_we0 = layer1_activations_we0_local;

assign select_ln49_1_fu_256_p3 = ((icmp_ln5211_reg_329_pp0_iter5_reg[0:0] == 1'b1) ? 10'd0 : cnt_fu_50);

assign select_ln49_2_fu_184_p3 = ((icmp_ln5211_fu_170_p2[0:0] == 1'b1) ? add_ln49_fu_164_p2 : x_fu_58);

assign select_ln49_fu_176_p3 = ((icmp_ln5211_fu_170_p2[0:0] == 1'b1) ? 10'd0 : y_fu_54);

assign trunc_ln49_fu_196_p1 = select_ln49_2_fu_184_p3[0:0];

assign zext_ln22_fu_243_p1 = W1_q0;

assign zext_ln49_fu_278_p1 = lshr_ln_reg_353_pp0_iter5_reg;

assign zext_ln52_1_fu_235_p1 = select_ln49_reg_334_pp0_iter3_reg;

assign zext_ln52_3_fu_272_p1 = cnt_2_fu_266_p2;

assign zext_ln54_1_fu_263_p1 = icmp_ln23_reg_373;

assign zext_ln54_fu_239_p1 = grp_fu_288_p3;

endmodule //feedforward_burst_feedforward_burst_Pipeline_VITIS_LOOP_49_1_VITIS_LOOP_52_2
