// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module feedforward_burst_feedforward_burst_Pipeline_VITIS_LOOP_49_1_VITIS_LOOP_52_21 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer1_quant_address0,
        layer1_quant_ce0,
        layer1_quant_q0,
        layer2_activations_address0,
        layer2_activations_ce0,
        layer2_activations_we0,
        layer2_activations_d0,
        layer2_activations_1_address0,
        layer2_activations_1_ce0,
        layer2_activations_1_we0,
        layer2_activations_1_d0,
        layer2_activations_2_address0,
        layer2_activations_2_ce0,
        layer2_activations_2_we0,
        layer2_activations_2_d0,
        layer2_activations_3_address0,
        layer2_activations_3_ce0,
        layer2_activations_3_we0,
        layer2_activations_3_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] layer1_quant_address0;
output   layer1_quant_ce0;
input  [0:0] layer1_quant_q0;
output  [3:0] layer2_activations_address0;
output   layer2_activations_ce0;
output   layer2_activations_we0;
output  [31:0] layer2_activations_d0;
output  [3:0] layer2_activations_1_address0;
output   layer2_activations_1_ce0;
output   layer2_activations_1_we0;
output  [31:0] layer2_activations_1_d0;
output  [3:0] layer2_activations_2_address0;
output   layer2_activations_2_ce0;
output   layer2_activations_2_we0;
output  [31:0] layer2_activations_2_d0;
output  [3:0] layer2_activations_3_address0;
output   layer2_activations_3_ce0;
output   layer2_activations_3_we0;
output  [31:0] layer2_activations_3_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln49_fu_181_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [12:0] W2_address0;
wire   [0:0] W2_q0;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln52_fu_210_p2;
reg   [0:0] icmp_ln52_reg_380;
reg   [0:0] icmp_ln52_reg_380_pp0_iter2_reg;
reg   [0:0] icmp_ln52_reg_380_pp0_iter3_reg;
wire   [7:0] select_ln49_fu_216_p3;
reg   [7:0] select_ln49_reg_385;
reg   [7:0] select_ln49_reg_385_pp0_iter2_reg;
wire   [1:0] trunc_ln49_fu_232_p1;
reg   [1:0] trunc_ln49_reg_391;
reg   [1:0] trunc_ln49_reg_391_pp0_iter2_reg;
reg   [1:0] trunc_ln49_reg_391_pp0_iter3_reg;
wire   [5:0] empty_fu_236_p1;
reg   [5:0] empty_reg_395;
wire   [0:0] icmp_ln52_1_fu_246_p2;
reg   [0:0] icmp_ln52_1_reg_400;
reg   [0:0] icmp_ln52_1_reg_400_pp0_iter2_reg;
reg   [0:0] icmp_ln52_1_reg_400_pp0_iter3_reg;
reg   [3:0] lshr_ln49_1_reg_404;
reg   [3:0] lshr_ln49_1_reg_404_pp0_iter2_reg;
reg   [3:0] lshr_ln49_1_reg_404_pp0_iter3_reg;
reg   [0:0] W2_load_reg_419;
wire   [63:0] zext_ln54_fu_288_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln52_fu_293_p1;
wire   [63:0] zext_ln49_fu_336_p1;
reg   [7:0] cnt_fu_64;
wire   [7:0] cnt_1_fu_322_p2;
wire    ap_loop_init;
reg   [7:0] y_fu_68;
wire   [7:0] add_ln52_fu_240_p2;
reg   [6:0] x_fu_72;
wire   [6:0] select_ln49_2_fu_224_p3;
reg   [13:0] indvar_flatten6_fu_76;
wire   [13:0] add_ln49_fu_187_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten6_load;
reg    W2_ce0_local;
reg    layer1_quant_ce0_local;
reg    layer2_activations_2_we0_local;
wire   [31:0] zext_ln52_2_fu_328_p1;
reg    layer2_activations_2_ce0_local;
reg    layer2_activations_1_we0_local;
reg    layer2_activations_1_ce0_local;
reg    layer2_activations_we0_local;
reg    layer2_activations_ce0_local;
reg    layer2_activations_3_we0_local;
reg    layer2_activations_3_ce0_local;
wire   [6:0] add_ln49_1_fu_204_p2;
wire   [12:0] zext_ln52_1_fu_279_p1;
wire   [12:0] tmp_3_fu_272_p3;
wire   [12:0] add_ln54_fu_282_p2;
wire   [0:0] xor_ln23_fu_307_p2;
wire   [0:0] xor_ln23_1_fu_312_p2;
wire   [7:0] zext_ln54_1_fu_318_p1;
wire   [7:0] select_ln49_1_fu_300_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 cnt_fu_64 = 8'd0;
#0 y_fu_68 = 8'd0;
#0 x_fu_72 = 7'd0;
#0 indvar_flatten6_fu_76 = 14'd0;
#0 ap_done_reg = 1'b0;
end

feedforward_burst_feedforward_burst_Pipeline_VITIS_LOOP_49_1_VITIS_LOOP_52_21_W2_ROM_AUTO_1R #(
    .DataWidth( 1 ),
    .AddressRange( 8192 ),
    .AddressWidth( 13 ))
W2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(W2_address0),
    .ce0(W2_ce0_local),
    .q0(W2_q0)
);

feedforward_burst_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            cnt_fu_64 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter4 == 1'b1)) begin
            cnt_fu_64 <= cnt_1_fu_322_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln49_fu_181_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten6_fu_76 <= add_ln49_fu_187_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten6_fu_76 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            x_fu_72 <= 7'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            x_fu_72 <= select_ln49_2_fu_224_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            y_fu_68 <= 8'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            y_fu_68 <= add_ln52_fu_240_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        W2_load_reg_419 <= W2_q0;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        icmp_ln52_1_reg_400_pp0_iter2_reg <= icmp_ln52_1_reg_400;
        icmp_ln52_1_reg_400_pp0_iter3_reg <= icmp_ln52_1_reg_400_pp0_iter2_reg;
        icmp_ln52_reg_380_pp0_iter2_reg <= icmp_ln52_reg_380;
        icmp_ln52_reg_380_pp0_iter3_reg <= icmp_ln52_reg_380_pp0_iter2_reg;
        lshr_ln49_1_reg_404_pp0_iter2_reg <= lshr_ln49_1_reg_404;
        lshr_ln49_1_reg_404_pp0_iter3_reg <= lshr_ln49_1_reg_404_pp0_iter2_reg;
        select_ln49_reg_385_pp0_iter2_reg <= select_ln49_reg_385;
        trunc_ln49_reg_391_pp0_iter2_reg <= trunc_ln49_reg_391;
        trunc_ln49_reg_391_pp0_iter3_reg <= trunc_ln49_reg_391_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        empty_reg_395 <= empty_fu_236_p1;
        icmp_ln52_1_reg_400 <= icmp_ln52_1_fu_246_p2;
        icmp_ln52_reg_380 <= icmp_ln52_fu_210_p2;
        lshr_ln49_1_reg_404 <= {{select_ln49_2_fu_224_p3[5:2]}};
        select_ln49_reg_385 <= select_ln49_fu_216_p3;
        trunc_ln49_reg_391 <= trunc_ln49_fu_232_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        W2_ce0_local = 1'b1;
    end else begin
        W2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln49_fu_181_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten6_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten6_load = indvar_flatten6_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        layer1_quant_ce0_local = 1'b1;
    end else begin
        layer1_quant_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        layer2_activations_1_ce0_local = 1'b1;
    end else begin
        layer2_activations_1_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln52_1_reg_400_pp0_iter3_reg == 1'd1) & (trunc_ln49_reg_391_pp0_iter3_reg == 2'd1))) begin
        layer2_activations_1_we0_local = 1'b1;
    end else begin
        layer2_activations_1_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        layer2_activations_2_ce0_local = 1'b1;
    end else begin
        layer2_activations_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln52_1_reg_400_pp0_iter3_reg == 1'd1) & (trunc_ln49_reg_391_pp0_iter3_reg == 2'd2))) begin
        layer2_activations_2_we0_local = 1'b1;
    end else begin
        layer2_activations_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        layer2_activations_3_ce0_local = 1'b1;
    end else begin
        layer2_activations_3_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln52_1_reg_400_pp0_iter3_reg == 1'd1) & (trunc_ln49_reg_391_pp0_iter3_reg == 2'd3))) begin
        layer2_activations_3_we0_local = 1'b1;
    end else begin
        layer2_activations_3_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        layer2_activations_ce0_local = 1'b1;
    end else begin
        layer2_activations_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln52_1_reg_400_pp0_iter3_reg == 1'd1) & (trunc_ln49_reg_391_pp0_iter3_reg == 2'd0))) begin
        layer2_activations_we0_local = 1'b1;
    end else begin
        layer2_activations_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign W2_address0 = zext_ln54_fu_288_p1;

assign add_ln49_1_fu_204_p2 = (x_fu_72 + 7'd1);

assign add_ln49_fu_187_p2 = (ap_sig_allocacmp_indvar_flatten6_load + 14'd1);

assign add_ln52_fu_240_p2 = (select_ln49_fu_216_p3 + 8'd1);

assign add_ln54_fu_282_p2 = (zext_ln52_1_fu_279_p1 + tmp_3_fu_272_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign cnt_1_fu_322_p2 = (zext_ln54_1_fu_318_p1 + select_ln49_1_fu_300_p3);

assign empty_fu_236_p1 = select_ln49_2_fu_224_p3[5:0];

assign icmp_ln49_fu_181_p2 = ((ap_sig_allocacmp_indvar_flatten6_load == 14'd8192) ? 1'b1 : 1'b0);

assign icmp_ln52_1_fu_246_p2 = ((add_ln52_fu_240_p2 == 8'd128) ? 1'b1 : 1'b0);

assign icmp_ln52_fu_210_p2 = ((y_fu_68 == 8'd128) ? 1'b1 : 1'b0);

assign layer1_quant_address0 = zext_ln52_fu_293_p1;

assign layer1_quant_ce0 = layer1_quant_ce0_local;

assign layer2_activations_1_address0 = zext_ln49_fu_336_p1;

assign layer2_activations_1_ce0 = layer2_activations_1_ce0_local;

assign layer2_activations_1_d0 = zext_ln52_2_fu_328_p1;

assign layer2_activations_1_we0 = layer2_activations_1_we0_local;

assign layer2_activations_2_address0 = zext_ln49_fu_336_p1;

assign layer2_activations_2_ce0 = layer2_activations_2_ce0_local;

assign layer2_activations_2_d0 = zext_ln52_2_fu_328_p1;

assign layer2_activations_2_we0 = layer2_activations_2_we0_local;

assign layer2_activations_3_address0 = zext_ln49_fu_336_p1;

assign layer2_activations_3_ce0 = layer2_activations_3_ce0_local;

assign layer2_activations_3_d0 = zext_ln52_2_fu_328_p1;

assign layer2_activations_3_we0 = layer2_activations_3_we0_local;

assign layer2_activations_address0 = zext_ln49_fu_336_p1;

assign layer2_activations_ce0 = layer2_activations_ce0_local;

assign layer2_activations_d0 = zext_ln52_2_fu_328_p1;

assign layer2_activations_we0 = layer2_activations_we0_local;

assign select_ln49_1_fu_300_p3 = ((icmp_ln52_reg_380_pp0_iter3_reg[0:0] == 1'b1) ? 8'd0 : cnt_fu_64);

assign select_ln49_2_fu_224_p3 = ((icmp_ln52_fu_210_p2[0:0] == 1'b1) ? add_ln49_1_fu_204_p2 : x_fu_72);

assign select_ln49_fu_216_p3 = ((icmp_ln52_fu_210_p2[0:0] == 1'b1) ? 8'd0 : y_fu_68);

assign tmp_3_fu_272_p3 = {{empty_reg_395}, {7'd0}};

assign trunc_ln49_fu_232_p1 = select_ln49_2_fu_224_p3[1:0];

assign xor_ln23_1_fu_312_p2 = (xor_ln23_fu_307_p2 ^ 1'd1);

assign xor_ln23_fu_307_p2 = (layer1_quant_q0 ^ W2_load_reg_419);

assign zext_ln49_fu_336_p1 = lshr_ln49_1_reg_404_pp0_iter3_reg;

assign zext_ln52_1_fu_279_p1 = select_ln49_reg_385;

assign zext_ln52_2_fu_328_p1 = cnt_1_fu_322_p2;

assign zext_ln52_fu_293_p1 = select_ln49_reg_385_pp0_iter2_reg;

assign zext_ln54_1_fu_318_p1 = xor_ln23_1_fu_312_p2;

assign zext_ln54_fu_288_p1 = add_ln54_fu_282_p2;

endmodule //feedforward_burst_feedforward_burst_Pipeline_VITIS_LOOP_49_1_VITIS_LOOP_52_21
