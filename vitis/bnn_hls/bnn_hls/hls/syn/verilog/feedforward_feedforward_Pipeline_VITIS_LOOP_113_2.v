// ==============================================================
// Generated by Vitis HLS v2024.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module feedforward_feedforward_Pipeline_VITIS_LOOP_113_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        colsW1,
        layer1_activations_2_address0,
        layer1_activations_2_ce0,
        layer1_activations_2_we0,
        layer1_activations_2_d0,
        layer1_activations_2_address1,
        layer1_activations_2_ce1,
        layer1_activations_2_q1,
        X_size,
        layer1_activations_address0,
        layer1_activations_ce0,
        layer1_activations_we0,
        layer1_activations_d0,
        layer1_activations_address1,
        layer1_activations_ce1,
        layer1_activations_q1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [30:0] colsW1;
output  [5:0] layer1_activations_2_address0;
output   layer1_activations_2_ce0;
output   layer1_activations_2_we0;
output  [31:0] layer1_activations_2_d0;
output  [5:0] layer1_activations_2_address1;
output   layer1_activations_2_ce1;
input  [31:0] layer1_activations_2_q1;
input  [31:0] X_size;
output  [5:0] layer1_activations_address0;
output   layer1_activations_ce0;
output   layer1_activations_we0;
output  [31:0] layer1_activations_d0;
output  [5:0] layer1_activations_address1;
output   layer1_activations_ce1;
input  [31:0] layer1_activations_q1;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln113_1_fu_144_p2;
wire   [0:0] icmp_ln113_fu_104_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln113_reg_196;
reg   [0:0] icmp_ln113_reg_196_pp0_iter1_reg;
reg   [5:0] layer1_activations_addr_reg_200;
reg   [5:0] layer1_activations_addr_reg_200_pp0_iter1_reg;
reg   [0:0] icmp_ln113_1_reg_206;
reg   [0:0] icmp_ln113_1_reg_206_pp0_iter1_reg;
reg   [5:0] layer1_activations_2_addr_reg_210;
reg   [5:0] layer1_activations_2_addr_reg_210_pp0_iter1_reg;
wire   [31:0] sub_ln116_fu_167_p2;
reg   [31:0] sub_ln116_reg_216;
wire   [31:0] sub_ln116_1_fu_178_p2;
reg   [31:0] sub_ln116_1_reg_221;
wire   [63:0] zext_ln113_fu_120_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] i_1_fu_42;
wire   [31:0] add_ln113_fu_150_p2;
wire    ap_loop_init;
reg   [31:0] ap_sig_allocacmp_i;
reg    layer1_activations_ce1_local;
reg    layer1_activations_we0_local;
reg    layer1_activations_ce0_local;
reg    layer1_activations_2_ce1_local;
reg    layer1_activations_2_we0_local;
reg    layer1_activations_2_ce0_local;
wire   [31:0] colsW1_cast_fu_92_p1;
wire   [5:0] lshr_ln1_fu_110_p4;
wire   [29:0] tmp_1_fu_126_p4;
wire   [30:0] or_ln_fu_136_p3;
wire   [31:0] shl_ln116_fu_161_p2;
wire   [31:0] shl_ln116_1_fu_172_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_242;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 i_1_fu_42 = 32'd0;
#0 ap_done_reg = 1'b0;
end

feedforward_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((1'b1 == ap_condition_242)) begin
            i_1_fu_42 <= add_ln113_fu_150_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_42 <= 32'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln113_1_reg_206 <= icmp_ln113_1_fu_144_p2;
        icmp_ln113_1_reg_206_pp0_iter1_reg <= icmp_ln113_1_reg_206;
        icmp_ln113_reg_196 <= icmp_ln113_fu_104_p2;
        icmp_ln113_reg_196_pp0_iter1_reg <= icmp_ln113_reg_196;
        layer1_activations_2_addr_reg_210 <= zext_ln113_fu_120_p1;
        layer1_activations_2_addr_reg_210_pp0_iter1_reg <= layer1_activations_2_addr_reg_210;
        layer1_activations_addr_reg_200 <= zext_ln113_fu_120_p1;
        layer1_activations_addr_reg_200_pp0_iter1_reg <= layer1_activations_addr_reg_200;
        sub_ln116_1_reg_221 <= sub_ln116_1_fu_178_p2;
        sub_ln116_reg_216 <= sub_ln116_fu_167_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & ((icmp_ln113_fu_104_p2 == 1'd0) | (icmp_ln113_1_fu_144_p2 == 1'd0)))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 32'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_42;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer1_activations_2_ce0_local = 1'b1;
    end else begin
        layer1_activations_2_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_activations_2_ce1_local = 1'b1;
    end else begin
        layer1_activations_2_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln113_1_reg_206_pp0_iter1_reg == 1'd1) & (icmp_ln113_reg_196_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer1_activations_2_we0_local = 1'b1;
    end else begin
        layer1_activations_2_we0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer1_activations_ce0_local = 1'b1;
    end else begin
        layer1_activations_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_activations_ce1_local = 1'b1;
    end else begin
        layer1_activations_ce1_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln113_reg_196_pp0_iter1_reg == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer1_activations_we0_local = 1'b1;
    end else begin
        layer1_activations_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln113_fu_150_p2 = (ap_sig_allocacmp_i + 32'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_242 = ((icmp_ln113_fu_104_p2 == 1'd1) & (icmp_ln113_1_fu_144_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign colsW1_cast_fu_92_p1 = colsW1;

assign icmp_ln113_1_fu_144_p2 = ((or_ln_fu_136_p3 < colsW1) ? 1'b1 : 1'b0);

assign icmp_ln113_fu_104_p2 = ((ap_sig_allocacmp_i < colsW1_cast_fu_92_p1) ? 1'b1 : 1'b0);

assign layer1_activations_2_address0 = layer1_activations_2_addr_reg_210_pp0_iter1_reg;

assign layer1_activations_2_address1 = zext_ln113_fu_120_p1;

assign layer1_activations_2_ce0 = layer1_activations_2_ce0_local;

assign layer1_activations_2_ce1 = layer1_activations_2_ce1_local;

assign layer1_activations_2_d0 = sub_ln116_1_reg_221;

assign layer1_activations_2_we0 = layer1_activations_2_we0_local;

assign layer1_activations_address0 = layer1_activations_addr_reg_200_pp0_iter1_reg;

assign layer1_activations_address1 = zext_ln113_fu_120_p1;

assign layer1_activations_ce0 = layer1_activations_ce0_local;

assign layer1_activations_ce1 = layer1_activations_ce1_local;

assign layer1_activations_d0 = sub_ln116_reg_216;

assign layer1_activations_we0 = layer1_activations_we0_local;

assign lshr_ln1_fu_110_p4 = {{ap_sig_allocacmp_i[6:1]}};

assign or_ln_fu_136_p3 = {{tmp_1_fu_126_p4}, {1'd1}};

assign shl_ln116_1_fu_172_p2 = layer1_activations_2_q1 << 32'd1;

assign shl_ln116_fu_161_p2 = layer1_activations_q1 << 32'd1;

assign sub_ln116_1_fu_178_p2 = (shl_ln116_1_fu_172_p2 - X_size);

assign sub_ln116_fu_167_p2 = (shl_ln116_fu_161_p2 - X_size);

assign tmp_1_fu_126_p4 = {{ap_sig_allocacmp_i[30:1]}};

assign zext_ln113_fu_120_p1 = lshr_ln1_fu_110_p4;

endmodule //feedforward_feedforward_Pipeline_VITIS_LOOP_113_2
