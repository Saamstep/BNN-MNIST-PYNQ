-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity feedforward_burst_feedforward_burst_Pipeline_VITIS_LOOP_49_1_VITIS_LOOP_52_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    X0_input_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    X0_input_ce0 : OUT STD_LOGIC;
    X0_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_activations_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer1_activations_ce0 : OUT STD_LOGIC;
    layer1_activations_we0 : OUT STD_LOGIC;
    layer1_activations_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer1_activations_1_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer1_activations_1_ce0 : OUT STD_LOGIC;
    layer1_activations_1_we0 : OUT STD_LOGIC;
    layer1_activations_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of feedforward_burst_feedforward_burst_Pipeline_VITIS_LOOP_49_1_VITIS_LOOP_52_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv17_18800 : STD_LOGIC_VECTOR (16 downto 0) := "11000100000000000";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv10_310 : STD_LOGIC_VECTOR (9 downto 0) := "1100010000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv17_310 : STD_LOGIC_VECTOR (16 downto 0) := "00000001100010000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln49_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal W1_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal W1_q0 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln5211_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5211_reg_329 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5211_reg_329_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5211_reg_329_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5211_reg_329_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln5211_reg_329_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln49_fu_176_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln49_reg_334 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln49_reg_334_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln49_reg_334_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln49_fu_196_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln49_reg_345 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln49_reg_345_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln49_reg_345_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln49_reg_345_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln49_reg_345_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_349 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_349_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_349_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_349_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln52_reg_349_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln_reg_353 : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln_reg_353_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln_reg_353_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln_reg_353_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal lshr_ln_reg_353_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln23_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_373 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln52_1_fu_235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln54_fu_239_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_fu_278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cnt_fu_50 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal cnt_2_fu_266_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal y_fu_54 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal add_ln52_fu_200_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal x_fu_58 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln49_2_fu_184_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten_fu_62 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal add_ln49_2_fu_147_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (16 downto 0);
    signal X0_input_ce0_local : STD_LOGIC;
    signal W1_ce0_local : STD_LOGIC;
    signal layer1_activations_we0_local : STD_LOGIC;
    signal zext_ln52_3_fu_272_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal layer1_activations_ce0_local : STD_LOGIC;
    signal layer1_activations_1_we0_local : STD_LOGIC;
    signal layer1_activations_1_ce0_local : STD_LOGIC;
    signal add_ln49_fu_164_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_288_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln22_fu_243_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln54_1_fu_263_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln49_1_fu_256_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_288_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_288_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_288_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal grp_fu_288_p10 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_288_p20 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component feedforward_burst_mac_muladd_10ns_8ns_10ns_17_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component feedforward_burst_feedforward_burst_Pipeline_VITIS_LOOP_49_1_VITIS_LOOP_52_2_W1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component feedforward_burst_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    W1_U : component feedforward_burst_feedforward_burst_Pipeline_VITIS_LOOP_49_1_VITIS_LOOP_52_2_W1_ROM_AUTO_1R
    generic map (
        DataWidth => 1,
        AddressRange => 100352,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W1_address0,
        ce0 => W1_ce0_local,
        q0 => W1_q0);

    mac_muladd_10ns_8ns_10ns_17_4_1_U5 : component feedforward_burst_mac_muladd_10ns_8ns_10ns_17_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 8,
        din2_WIDTH => 10,
        dout_WIDTH => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_288_p0,
        din1 => grp_fu_288_p1,
        din2 => grp_fu_288_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_288_p3);

    flow_control_loop_pipe_sequential_init_U : component feedforward_burst_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    cnt_fu_50_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    cnt_fu_50 <= ap_const_lv10_0;
                elsif ((ap_enable_reg_pp0_iter6 = ap_const_logic_1)) then 
                    cnt_fu_50 <= cnt_2_fu_266_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln49_fu_141_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_62 <= add_ln49_2_fu_147_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_62 <= ap_const_lv17_0;
                end if;
            end if; 
        end if;
    end process;

    x_fu_58_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    x_fu_58 <= ap_const_lv8_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    x_fu_58 <= select_ln49_2_fu_184_p3;
                end if;
            end if; 
        end if;
    end process;

    y_fu_54_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    y_fu_54 <= ap_const_lv10_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    y_fu_54 <= add_ln52_fu_200_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln5211_reg_329 <= icmp_ln5211_fu_170_p2;
                icmp_ln52_reg_349 <= icmp_ln52_fu_206_p2;
                lshr_ln_reg_353 <= select_ln49_2_fu_184_p3(6 downto 1);
                select_ln49_reg_334 <= select_ln49_fu_176_p3;
                trunc_ln49_reg_345 <= trunc_ln49_fu_196_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                icmp_ln23_reg_373 <= icmp_ln23_fu_247_p2;
                icmp_ln5211_reg_329_pp0_iter2_reg <= icmp_ln5211_reg_329;
                icmp_ln5211_reg_329_pp0_iter3_reg <= icmp_ln5211_reg_329_pp0_iter2_reg;
                icmp_ln5211_reg_329_pp0_iter4_reg <= icmp_ln5211_reg_329_pp0_iter3_reg;
                icmp_ln5211_reg_329_pp0_iter5_reg <= icmp_ln5211_reg_329_pp0_iter4_reg;
                icmp_ln52_reg_349_pp0_iter2_reg <= icmp_ln52_reg_349;
                icmp_ln52_reg_349_pp0_iter3_reg <= icmp_ln52_reg_349_pp0_iter2_reg;
                icmp_ln52_reg_349_pp0_iter4_reg <= icmp_ln52_reg_349_pp0_iter3_reg;
                icmp_ln52_reg_349_pp0_iter5_reg <= icmp_ln52_reg_349_pp0_iter4_reg;
                lshr_ln_reg_353_pp0_iter2_reg <= lshr_ln_reg_353;
                lshr_ln_reg_353_pp0_iter3_reg <= lshr_ln_reg_353_pp0_iter2_reg;
                lshr_ln_reg_353_pp0_iter4_reg <= lshr_ln_reg_353_pp0_iter3_reg;
                lshr_ln_reg_353_pp0_iter5_reg <= lshr_ln_reg_353_pp0_iter4_reg;
                select_ln49_reg_334_pp0_iter2_reg <= select_ln49_reg_334;
                select_ln49_reg_334_pp0_iter3_reg <= select_ln49_reg_334_pp0_iter2_reg;
                trunc_ln49_reg_345_pp0_iter2_reg <= trunc_ln49_reg_345;
                trunc_ln49_reg_345_pp0_iter3_reg <= trunc_ln49_reg_345_pp0_iter2_reg;
                trunc_ln49_reg_345_pp0_iter4_reg <= trunc_ln49_reg_345_pp0_iter3_reg;
                trunc_ln49_reg_345_pp0_iter5_reg <= trunc_ln49_reg_345_pp0_iter4_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    W1_address0 <= zext_ln54_fu_239_p1(17 - 1 downto 0);

    W1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            W1_ce0_local <= ap_const_logic_1;
        else 
            W1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    X0_input_address0 <= zext_ln52_1_fu_235_p1(10 - 1 downto 0);
    X0_input_ce0 <= X0_input_ce0_local;

    X0_input_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            X0_input_ce0_local <= ap_const_logic_1;
        else 
            X0_input_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    add_ln49_2_fu_147_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv17_1));
    add_ln49_fu_164_p2 <= std_logic_vector(unsigned(x_fu_58) + unsigned(ap_const_lv8_1));
    add_ln52_fu_200_p2 <= std_logic_vector(unsigned(select_ln49_fu_176_p3) + unsigned(ap_const_lv10_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln49_fu_141_p2)
    begin
        if (((icmp_ln49_fu_141_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_62)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv17_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_62;
        end if; 
    end process;

    cnt_2_fu_266_p2 <= std_logic_vector(unsigned(zext_ln54_1_fu_263_p1) + unsigned(select_ln49_1_fu_256_p3));
    grp_fu_288_p0 <= ap_const_lv17_310(10 - 1 downto 0);
    grp_fu_288_p1 <= grp_fu_288_p10(8 - 1 downto 0);
    grp_fu_288_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln49_2_fu_184_p3),17));
    grp_fu_288_p2 <= grp_fu_288_p20(10 - 1 downto 0);
    grp_fu_288_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln49_reg_334_pp0_iter2_reg),17));
    icmp_ln23_fu_247_p2 <= "1" when (X0_input_q0 = zext_ln22_fu_243_p1) else "0";
    icmp_ln49_fu_141_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv17_18800) else "0";
    icmp_ln5211_fu_170_p2 <= "1" when (y_fu_54 = ap_const_lv10_310) else "0";
    icmp_ln52_fu_206_p2 <= "1" when (add_ln52_fu_200_p2 = ap_const_lv10_310) else "0";
    layer1_activations_1_address0 <= zext_ln49_fu_278_p1(6 - 1 downto 0);
    layer1_activations_1_ce0 <= layer1_activations_1_ce0_local;

    layer1_activations_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            layer1_activations_1_ce0_local <= ap_const_logic_1;
        else 
            layer1_activations_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    layer1_activations_1_d0 <= zext_ln52_3_fu_272_p1;
    layer1_activations_1_we0 <= layer1_activations_1_we0_local;

    layer1_activations_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, trunc_ln49_reg_345_pp0_iter5_reg, icmp_ln52_reg_349_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln52_reg_349_pp0_iter5_reg = ap_const_lv1_1) and (trunc_ln49_reg_345_pp0_iter5_reg = ap_const_lv1_1))) then 
            layer1_activations_1_we0_local <= ap_const_logic_1;
        else 
            layer1_activations_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    layer1_activations_address0 <= zext_ln49_fu_278_p1(6 - 1 downto 0);
    layer1_activations_ce0 <= layer1_activations_ce0_local;

    layer1_activations_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            layer1_activations_ce0_local <= ap_const_logic_1;
        else 
            layer1_activations_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    layer1_activations_d0 <= zext_ln52_3_fu_272_p1;
    layer1_activations_we0 <= layer1_activations_we0_local;

    layer1_activations_we0_local_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001, trunc_ln49_reg_345_pp0_iter5_reg, icmp_ln52_reg_349_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (icmp_ln52_reg_349_pp0_iter5_reg = ap_const_lv1_1) and (trunc_ln49_reg_345_pp0_iter5_reg = ap_const_lv1_0))) then 
            layer1_activations_we0_local <= ap_const_logic_1;
        else 
            layer1_activations_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    select_ln49_1_fu_256_p3 <= 
        ap_const_lv10_0 when (icmp_ln5211_reg_329_pp0_iter5_reg(0) = '1') else 
        cnt_fu_50;
    select_ln49_2_fu_184_p3 <= 
        add_ln49_fu_164_p2 when (icmp_ln5211_fu_170_p2(0) = '1') else 
        x_fu_58;
    select_ln49_fu_176_p3 <= 
        ap_const_lv10_0 when (icmp_ln5211_fu_170_p2(0) = '1') else 
        y_fu_54;
    trunc_ln49_fu_196_p1 <= select_ln49_2_fu_184_p3(1 - 1 downto 0);
    zext_ln22_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(W1_q0),32));
    zext_ln49_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_353_pp0_iter5_reg),64));
    zext_ln52_1_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln49_reg_334_pp0_iter3_reg),64));
    zext_ln52_3_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cnt_2_fu_266_p2),32));
    zext_ln54_1_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln23_reg_373),10));
    zext_ln54_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_288_p3),64));
end behav;
