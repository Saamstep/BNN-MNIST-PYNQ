-- ==============================================================
-- Generated by Vitis HLS v2024.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity feedforward_feedforward_Pipeline_VITIS_LOOP_113_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    colsW1 : IN STD_LOGIC_VECTOR (30 downto 0);
    layer1_activations_2_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer1_activations_2_ce0 : OUT STD_LOGIC;
    layer1_activations_2_we0 : OUT STD_LOGIC;
    layer1_activations_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer1_activations_2_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer1_activations_2_ce1 : OUT STD_LOGIC;
    layer1_activations_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    X_size : IN STD_LOGIC_VECTOR (31 downto 0);
    layer1_activations_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer1_activations_ce0 : OUT STD_LOGIC;
    layer1_activations_we0 : OUT STD_LOGIC;
    layer1_activations_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    layer1_activations_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
    layer1_activations_ce1 : OUT STD_LOGIC;
    layer1_activations_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of feedforward_feedforward_Pipeline_VITIS_LOOP_113_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln113_1_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_fu_104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln113_reg_196 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_reg_196_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal layer1_activations_addr_reg_200 : STD_LOGIC_VECTOR (5 downto 0);
    signal layer1_activations_addr_reg_200_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln113_1_reg_206 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_1_reg_206_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal layer1_activations_2_addr_reg_210 : STD_LOGIC_VECTOR (5 downto 0);
    signal layer1_activations_2_addr_reg_210_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln116_fu_167_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln116_reg_216 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln116_1_fu_178_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln116_1_reg_221 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln113_fu_120_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_1_fu_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal add_ln113_fu_150_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (31 downto 0);
    signal layer1_activations_ce1_local : STD_LOGIC;
    signal layer1_activations_we0_local : STD_LOGIC;
    signal layer1_activations_ce0_local : STD_LOGIC;
    signal layer1_activations_2_ce1_local : STD_LOGIC;
    signal layer1_activations_2_we0_local : STD_LOGIC;
    signal layer1_activations_2_ce0_local : STD_LOGIC;
    signal colsW1_cast_fu_92_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln1_fu_110_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_126_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal or_ln_fu_136_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln116_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln116_1_fu_172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_242 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component feedforward_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component feedforward_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    i_1_fu_42_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_const_boolean_1 = ap_condition_242)) then 
                    i_1_fu_42 <= add_ln113_fu_150_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_42 <= ap_const_lv32_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln113_1_reg_206 <= icmp_ln113_1_fu_144_p2;
                icmp_ln113_1_reg_206_pp0_iter1_reg <= icmp_ln113_1_reg_206;
                icmp_ln113_reg_196 <= icmp_ln113_fu_104_p2;
                icmp_ln113_reg_196_pp0_iter1_reg <= icmp_ln113_reg_196;
                layer1_activations_2_addr_reg_210 <= zext_ln113_fu_120_p1(6 - 1 downto 0);
                layer1_activations_2_addr_reg_210_pp0_iter1_reg <= layer1_activations_2_addr_reg_210;
                layer1_activations_addr_reg_200 <= zext_ln113_fu_120_p1(6 - 1 downto 0);
                layer1_activations_addr_reg_200_pp0_iter1_reg <= layer1_activations_addr_reg_200;
                sub_ln116_1_reg_221 <= sub_ln116_1_fu_178_p2;
                sub_ln116_reg_216 <= sub_ln116_fu_167_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln113_fu_150_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv32_2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_242_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln113_1_fu_144_p2, icmp_ln113_fu_104_p2)
    begin
                ap_condition_242 <= ((icmp_ln113_fu_104_p2 = ap_const_lv1_1) and (icmp_ln113_1_fu_144_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln113_1_fu_144_p2, icmp_ln113_fu_104_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and ((icmp_ln113_fu_104_p2 = ap_const_lv1_0) or (icmp_ln113_1_fu_144_p2 = ap_const_lv1_0)))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_1_fu_42, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i <= ap_const_lv32_0;
        else 
            ap_sig_allocacmp_i <= i_1_fu_42;
        end if; 
    end process;

    colsW1_cast_fu_92_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(colsW1),32));
    icmp_ln113_1_fu_144_p2 <= "1" when (unsigned(or_ln_fu_136_p3) < unsigned(colsW1)) else "0";
    icmp_ln113_fu_104_p2 <= "1" when (unsigned(ap_sig_allocacmp_i) < unsigned(colsW1_cast_fu_92_p1)) else "0";
    layer1_activations_2_address0 <= layer1_activations_2_addr_reg_210_pp0_iter1_reg;
    layer1_activations_2_address1 <= zext_ln113_fu_120_p1(6 - 1 downto 0);
    layer1_activations_2_ce0 <= layer1_activations_2_ce0_local;

    layer1_activations_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer1_activations_2_ce0_local <= ap_const_logic_1;
        else 
            layer1_activations_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    layer1_activations_2_ce1 <= layer1_activations_2_ce1_local;

    layer1_activations_2_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_activations_2_ce1_local <= ap_const_logic_1;
        else 
            layer1_activations_2_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    layer1_activations_2_d0 <= sub_ln116_1_reg_221;
    layer1_activations_2_we0 <= layer1_activations_2_we0_local;

    layer1_activations_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln113_reg_196_pp0_iter1_reg, icmp_ln113_1_reg_206_pp0_iter1_reg)
    begin
        if (((icmp_ln113_1_reg_206_pp0_iter1_reg = ap_const_lv1_1) and (icmp_ln113_reg_196_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer1_activations_2_we0_local <= ap_const_logic_1;
        else 
            layer1_activations_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    layer1_activations_address0 <= layer1_activations_addr_reg_200_pp0_iter1_reg;
    layer1_activations_address1 <= zext_ln113_fu_120_p1(6 - 1 downto 0);
    layer1_activations_ce0 <= layer1_activations_ce0_local;

    layer1_activations_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer1_activations_ce0_local <= ap_const_logic_1;
        else 
            layer1_activations_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    layer1_activations_ce1 <= layer1_activations_ce1_local;

    layer1_activations_ce1_local_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_activations_ce1_local <= ap_const_logic_1;
        else 
            layer1_activations_ce1_local <= ap_const_logic_0;
        end if; 
    end process;

    layer1_activations_d0 <= sub_ln116_reg_216;
    layer1_activations_we0 <= layer1_activations_we0_local;

    layer1_activations_we0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, icmp_ln113_reg_196_pp0_iter1_reg)
    begin
        if (((icmp_ln113_reg_196_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer1_activations_we0_local <= ap_const_logic_1;
        else 
            layer1_activations_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln1_fu_110_p4 <= ap_sig_allocacmp_i(6 downto 1);
    or_ln_fu_136_p3 <= (tmp_1_fu_126_p4 & ap_const_lv1_1);
    shl_ln116_1_fu_172_p2 <= std_logic_vector(shift_left(unsigned(layer1_activations_2_q1),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    shl_ln116_fu_161_p2 <= std_logic_vector(shift_left(unsigned(layer1_activations_q1),to_integer(unsigned('0' & ap_const_lv32_1(31-1 downto 0)))));
    sub_ln116_1_fu_178_p2 <= std_logic_vector(unsigned(shl_ln116_1_fu_172_p2) - unsigned(X_size));
    sub_ln116_fu_167_p2 <= std_logic_vector(unsigned(shl_ln116_fu_161_p2) - unsigned(X_size));
    tmp_1_fu_126_p4 <= ap_sig_allocacmp_i(30 downto 1);
    zext_ln113_fu_120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_110_p4),64));
end behav;
